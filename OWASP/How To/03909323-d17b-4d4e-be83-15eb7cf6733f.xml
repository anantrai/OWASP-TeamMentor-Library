<?xml version="1.0" encoding="utf-8"?><guidanceItem id="03909323-d17b-4d4e-be83-15eb7cf6733f" type="howto" title="How to Test for Known Plaintext Bugs" cssFile="guidance.css" Date="2011-01-20T03:20:56.015625Z" Author="" Category="Cryptography" filePath="..\Libraries\OWASP\How To\03909323-d17b-4d4e-be83-15eb7cf6733f.xml" Priority="" Rule_Type="Test" Source="OWASP" Status="" Technology=" Any" Topic="Security" Type="How To" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1><SPAN>Applies to:</SPAN></H1><UL><LI><SPAN>Public and private key encryption systems.<B></B></SPAN></LI></UL><P><B><SPAN>&nbsp;</SPAN></B></P><H1><SPAN>Summary</SPAN></H1><P><SPAN>In known plaintext attacks the adversary knows both the plaintext and its equivalent ciphertext, and then uses both to calculate a secret cryptographic variable such as the encryption key.<SPAN>&nbsp;&nbsp; </SPAN>Known plaintext bugs are simple to exploit as the attacker doesn&#8217;t need to force the victim into encrypting any particular chosen plaintext.</SPAN></P><P><SPAN>The following steps are recommended to test for known plaintext bugs:</SPAN></P><UL><LI><SPAN>Step 1:<SPAN>&nbsp; </SPAN>Understand Attack Scenarios</SPAN><LI><SPAN>Step 2:<SPAN>&nbsp; </SPAN>Analyze Root Causes and Mitigations</SPAN><LI><SPAN>Step 3:<SPAN>&nbsp; </SPAN>Start Testing and Exploring</SPAN><LI><SPAN>Step 4:<SPAN>&nbsp; </SPAN>Tune Test Cases</SPAN></LI></UL><P><B><SPAN>&nbsp;</SPAN></B></P><H1><SPAN>Step 1:<SPAN>&nbsp; </SPAN>Understand Attack Scenario </SPAN></H1><P><SPAN>First, you need to understand the details of known plaintext attacks.<SPAN>&nbsp; </SPAN>In the common known plaintext attack scenario the adversary&#8217;s goal is to recover the encryption key.<SPAN>&nbsp; </SPAN>The scenario starts with the attacker selecting the victim and discovering the plaintext that the victim encrypts.<SPAN>&nbsp; </SPAN>The attacker then waits until the victim encrypts the plaintext and observes the resulting ciphertext.<SPAN>&nbsp; </SPAN>Then, the attacker uses both the plaintext and ciphertext to recover the encryption key that satisfies the next equation:</SPAN></P><P><I><SPAN>C = E(K, P)</SPAN></I></P><P><SPAN>Where </SPAN><I><SPAN>E </SPAN></I><SPAN>stands for the encryption routine that converts plaintext </SPAN><I><SPAN>P</SPAN></I><SPAN> in to ciphertext </SPAN><I><SPAN>C</SPAN></I><SPAN> using the encryption key</SPAN><I><SPAN> K.</SPAN></I></P><P><SPAN>If the adversary is able to compute the encryption key, he can use it to decrypt an unknown ciphertext, as the following equation demonstrates:</SPAN></P><P><I><SPAN>Pu</SPAN></I><I><SPAN>&nbsp;= D(K, Ck)</SPAN></I><SPAN></SPAN></P><P><SPAN>Where </SPAN><I><SPAN>D </SPAN></I><SPAN>stands for the decryption routine that converts a known ciphertext </SPAN><I><SPAN>Ck </SPAN></I><SPAN>to the unknown plaintext </SPAN><I><SPAN>Pu</SPAN></I><SPAN> to using the encryption key</SPAN><I><SPAN> K.</SPAN></I></P><P><SPAN>The adversary is able to decrypt any ciphertext created using the stolen key, including potentially sensitive data such as passwords and credit card numbers.</SPAN><I><SPAN></SPAN></I></P><P><B><SPAN>&nbsp;</SPAN></B></P><H2><SPAN>Step 2:<SPAN>&nbsp; </SPAN>Analyze Root Cause and Mitigations</SPAN></H2><P><SPAN>As the section&#8217;s name indicates, the success of plaintext attacks depends on <I>knowing</I> the plaintext that is encrypted.<SPAN>&nbsp; </SPAN>It may seem improbable that an adversary gains knowledge of any plaintext; yet nonetheless there are some circumstances where this can happen.<SPAN>&nbsp; </SPAN>For instance, if the victim is out of the office and has an auto-reply email message configured; the attacker may very well know what the message looks like before it&#8217;s encrypted.<SPAN>&nbsp; </SPAN>Another common example is where the victim sends an email to a group of people including the attacker.<SPAN>&nbsp; </SPAN>The attacker can then read the plaintext sent to him, and the ciphertext sent to everybody else.<SPAN>&nbsp; </SPAN><SPAN>&nbsp;</SPAN></SPAN></P><P><SPAN>An additional attack might consist of the attacker sniffing an email conversation between two people exchanging an encrypted document as part of a review process.<SPAN>&nbsp; </SPAN>When the document is published the attacker can compare the plaintext publication with the latest version of the encrypted file.<SPAN>&nbsp; </SPAN><SPAN>&nbsp;</SPAN><I>Partially known</I> plaintext attacks occur when the adversary knows part of the plaintext such as headers of IP packets, the beginning of emails, etc.<SPAN>&nbsp; </SPAN>There are different ways for an adversary to know the plaintext in use - a root cause for this vulnerability is any situation which allows the adversary to be aware of such plaintext.</SPAN></P><P><SPAN>There are no clear mitigations against these attacks as most of the causes happen by design.<SPAN>&nbsp; </SPAN>For instance, email servers provide the functionality to have auto-reply messages.<SPAN>&nbsp; </SPAN>Furthermore, in the case where the victim sends the attacker a copy of a group email, there is no way to prevent the victim from emailing the attacker if the attacker is part of the group.<SPAN>&nbsp; </SPAN>Consider the case where the attacker sniffs an encrypted document in review: possible mitigations for this attack require higher level analysis and education, such as requiring the people involved in the document review to check the document in to an Intranet portal or similar mechanism rather than transferring it back and forth via email.<SPAN>&nbsp; </SPAN></SPAN></P><P><SPAN>&nbsp;</SPAN></P><H1><SPAN>Step 3:<SPAN>&nbsp; </SPAN>Start Testing and Exploring </SPAN></H1><P><SPAN>Now that you&#8217;ve learned what known plaintext attacks look like and the reasons why they exist, you must test for both secure and insecure implementations.</SPAN></P><P><SPAN>The basic known plaintext security testing follows these steps:</SPAN></P><OL><LI><SPAN>Select the victim.</SPAN><LI><SPAN>Read plaintext before the victim encrypts it.</SPAN><LI><SPAN>Read the ciphertext after the victim encrypts it.</SPAN><LI><SPAN>Use the plaintext and ciphertext to calculate the encryption key.</SPAN></LI></OL><P><I><SPAN>Expected result:</SPAN></I><SPAN><SPAN>&nbsp; </SPAN>The system protects against reading the plaintext before it is encrypted in step 2.<SPAN>&nbsp; </SPAN>The test fails if you can execute step 2.</SPAN></P><P><SPAN>It is important that during this step you explore the encryption routine used by the system under test.<SPAN>&nbsp; </SPAN>For example, you can check the size of the data before and after encryption.<SPAN>&nbsp; </SPAN>If the encryption routine doesn&#8217;t modify the data size then the plaintext and ciphertext have the same size.<SPAN>&nbsp; </SPAN>You can later compare the sizes as a preliminary check to see if the ciphertext matches the known plaintext. </SPAN></P><P><SPAN>Another way to test for known plaintext bugs is to become a valid user of the encryption system.<SPAN>&nbsp; </SPAN>For instance, picture a system that has multiple clients and uses a different key to talk to each client.<SPAN>&nbsp; </SPAN>After becoming a valid client, you can configure a network monitor to see how the server application communicates with you.<SPAN>&nbsp; </SPAN>In most cases, server applications use the same protocol to talk to multiple clients, so parts of the network packets (such as headers) will be constant.<SPAN>&nbsp; </SPAN>You can read these headers in plaintext as they arrive to you or as ciphertext as they arrive to each client, and use this pair of collected data to execute an attack on a client&#8217;s private key.<SPAN>&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN></P><P><SPAN>&nbsp;</SPAN></P><H1><SPAN>Step 4:<SPAN>&nbsp; </SPAN>Tune Test Cases</SPAN></H1><P><SPAN>Like any vulnerability, the amount of testing for known plaintext attacks depends on their risk.<SPAN>&nbsp; </SPAN>In some cases they represent no obvious risk; the time to compute the key using any known cryptanalysis in systems using large keys and a trusted encryption algorithm may be too great to represent a high risk.<SPAN>&nbsp; </SPAN>However, some systems are mission critical, hermetic, or self contained</SPAN><SPAN><SPAN>, </SPAN></SPAN><SPAN>and in such cases any possible knowledge of the plaintext before it is encrypted can pose a high risk.<SPAN>&nbsp;&nbsp; </SPAN></SPAN></P><P><SPAN>You must also decide what your attack goals are before testing.<SPAN>&nbsp; </SPAN>Make sure to define the attack&#8217;s goal in each test case (such as breaking a client&#8217;s key, the server&#8217;s key, or both.)<SPAN>&nbsp; </SPAN>Some keys are more critical to the security of the system under test than others, and you can use this fact to tune your test cases.</SPAN></P><P><B><SPAN>&nbsp;</SPAN></B></P><H1><SPAN>Conclusions</SPAN></H1><P><SPAN>Known plaintext attacks are cryptographic attacks in which the adversary knows the plaintext before it is encrypted.<SPAN>&nbsp; </SPAN>The goal of the attack is to calculate the encryption key to gather additional sensitive data.<SPAN>&nbsp; </SPAN>To test for these attacks, you need to understand their attack scenarios as well as their root causes and mitigations.<SPAN>&nbsp; </SPAN>Then, start testing from the ground up, such as checking message data lengths, and then additional approaches should be used such as becoming a legitimate client of the system and analyzing the format of the encrypted text that is being transmitted.<SPAN>&nbsp; </SPAN>Make sure to tune your test cases based on the sensitivity of the particular encryption key, and the risk potential of an attacker stealing it.</SPAN><B><U><SPAN></SPAN></U></B></P><P><B><SPAN>&nbsp;</SPAN></B></P><P><B><SPAN>&nbsp;</SPAN></B></P><P><B><SPAN>&nbsp;</SPAN></B></P><P>&nbsp;</P>]]></content></guidanceItem>