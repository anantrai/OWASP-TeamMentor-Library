<?xml version="1.0" encoding="utf-8"?><guidanceItem id="f9feb5d3-6509-4aa0-ad97-43d6ac17f697" type="howto" title="How to Test for Server-Side Code Injection in ASP .NET" cssFile="guidance.css" Date="2010-03-03T18:50:55.297Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\How To\f9feb5d3-6509-4aa0-ad97-43d6ac17f697.xml" Priority="" Rule_Type="Test" Source="ASP.NET 3.5" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="How To" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1><P><B><SPAN></SPAN></B></P><SPAN>Summary</SPAN></H1><P>ASP .NET applications are hosted by a web server capable of interpreting and executing server-side code such as Active Server Pages (ASP files).<SPAN>&nbsp;&nbsp; </SPAN>A server-side code injection bug occurs when an attacker is able to inject additional server-side code that is then interpreted and executed as part of the application&#8217;s code; for instance, when the application dynamically evaluates data sent by its clients.<SPAN>&nbsp; </SPAN>An attacker might be able to submit malicious code and have the ASP .NET application dynamically evaluate the injected code.<SPAN>&nbsp; </SPAN>Attackers can exploit server-side code injection bugs to execute logical attacks on ASP .NET applications.</P><P>Follow these steps to test for server-side code injection in ASP .NET applications:</P><UL><LI>Step 1: Understand attack scenarios <LI>Step 2: Analyze causes and countermeasures <LI>Step 3: Execute test cases</LI></UL><P>&nbsp;</P><H1><SPAN>Step 1: Understand attack scenarios</SPAN></H1><P>The first step in learning how to test for server-side code injection bugs is to understand well the anatomy of a server-side code injection vulnerability in ASP .NET.</P><P>It is important to understand the difference between client-side code injection and server-side code injection.<SPAN>&nbsp; </SPAN>Client-side code injection occurs when an attacker uses a vulnerable web application to execute remote code in the client&#8217;s browser context.<SPAN>&nbsp; </SPAN>This is why client-side code injection exploits such as cross-site scripting (XSS) as well as AJAX injection attacks are written in JavaScript; the victim client&#8217;s browser must be able to interpret the exploit code.<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>Server-side code injection aims at having the application&#8217;s web engine (such as ASP, JSP, etc.) interpret and execute the malicious code as part of the application.<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>This means that an attacker that successfully exploits a server-side code injection bug will add an extra application functionality that executes with the same privileges of the application&#8217;s code.<SPAN>&nbsp;&nbsp; </SPAN></P><P>ASP .NET web applications that dynamically evaluate scripts might be vulnerable to this attack.<SPAN>&nbsp;&nbsp;&nbsp; </SPAN>Consider an application that uses the following code:</P><PRE>&lt;&#37;<BR>&nbsp;&nbsp;&nbsp; If Not Request("Code") = Nothing Then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim fso, f<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'User input Code is written to a file named input.aspx<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fso = CreateObject("Scripting.FileSystemObject")<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f = fso.OpenTextFile(Server.MapPath("input.aspx"), 8, True)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.Write(Request("Code") &amp; vbCrLf)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.close()<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f = Nothing<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fso = Nothing<BR>&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'input.aspx is executed<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <STRONG>Server.Execute("input.aspx")</STRONG><BR>&nbsp;&nbsp;&nbsp; Else<BR>&#37;&gt;<BR>&lt;form&gt;<BR>&lt;input name="Code" size="100px" /&gt;&lt;input type="submit" name="Enter code" /&gt;<BR>&lt;/form&gt;<BR>&lt;&#37;<BR>End If<BR>&#37;&gt;<BR><BR></PRE><P>The application dynamically evaluates the input data entered in the <I>Code</I> web form parameter.<SPAN>&nbsp; </SPAN>As a result, an attacker can pass malicious code that will be executed by the application at the server-side.</P><P>In detail:</P><OL><LI>The attacker discovers an application functionality where client supplied input is dynamically evaluated and executed. <LI>The attacker passes malicious code as input so that the application executes it at the server-side.</LI></OL><P>&nbsp;</P><H1><SPAN>Step 2: Analyze Causes and Countermeasures</SPAN></H1><P>The following step in learning how to test for server-side code injection bugs is to understand what causes this attack and how to protect against it.<SPAN>&nbsp; </SPAN></P><P>Server-side code injection in ASP .NET applications is possible due to dynamic code evaluation vulnerabilities.<SPAN>&nbsp; </SPAN>A dynamic code evaluation vulnerability occurs when the application uses client-supplied input for code evaluation and execution without doing proper input validation and sanitization.<SPAN>&nbsp;&nbsp; </SPAN>For example, in the previous scenario the application blindly constructs an input text file and, without checking for malicious code, invokes the <I>Server.Execute</I> function to evaluate and execute the newly created text file.</P><P>To protect against this bug, ASP .NET must properly validate any data before using it for dynamic evaluation such as when executing functions of the <I>Server.Execute</I> family.<SPAN>&nbsp; </SPAN><SPAN>&nbsp;&nbsp;</SPAN>Developers are encouraged to create a <I>white list </I>containing a list of the valid data and code constructs.<SPAN>&nbsp; </SPAN>The application must then check that all parameters used in the dynamic evaluation appear in the white list and reject any input data that is not white-listed.</P><P><BR>&nbsp;</P><H1><SPAN>Step 3: Execute Test Cases</SPAN></H1><P>Now that you&#8217;ve reviewed the theoretical aspects of server-side code injection bugs in ASP .NET it is necessary to execute the necessary test cases to check if your application is vulnerable.</P><H2><EM>Test for Server-side code injection in ASP .NET</EM></H2><P>Follow these steps:</P><OL><LI>Discover a functionality in the application that performs dynamic code evaluation based on client supplied input. <LI>Pass a small proof-of-concept ASP .NET code as input such as: <UL><LI><PRE><SPAN>&lt;&#37; Response.Write("Application is vulnerable") &#37;&gt;</SPAN></PRE></LI></UL><LI>Observe how the application reacts to the injected code.</LI></OL><P>Expected results:<SPAN>&nbsp; </SPAN>The application is vulnerable if it evaluates and executes the code passed in step 2 and displays the message <I>Application is vulnerable.</I></P><P>&nbsp;</P><H1><SPAN>Conclusions</SPAN></H1><P>Server-side code injection bugs allow attackers to inject code that will be executed by the ASP .NET engine that hosts the vulnerable application.<SPAN>&nbsp;&nbsp; </SPAN>Attackers can use server-side code injection to execute logical attacks on the target application.<SPAN>&nbsp; </SPAN>To learn how to test for this vulnerability it is necessary to understand its attack scenario and how it is possible in ASP .NET applications, as well as how to protect against it.<SPAN>&nbsp; </SPAN>Testing for this bug requires passing a small proof-of-concept code as input to the application under test while observing how the application reacts.</P><P><SPAN>&nbsp;</SPAN></P>

]]></content></guidanceItem>