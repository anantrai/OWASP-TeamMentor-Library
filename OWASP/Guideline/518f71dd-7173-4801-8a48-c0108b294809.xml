<?xml version="1.0" encoding="utf-8"?><guidanceItem id="518f71dd-7173-4801-8a48-c0108b294809" type="guideline" title="Validate All Input Passed to Database" cssFile="guidance.css" Date="2010-12-30T00:52:37.5Z" Author="" Category="Data Access" filePath="..\Libraries\OWASP\Guideline\518f71dd-7173-4801-8a48-c0108b294809.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="Java" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>Applies to</H1><UL><LI>Applications written using Servlets or JSP&nbsp;that interact with a database.</LI></UL><H1>What to Do</H1><P>Validate all input before it is passed to the database.</P><H1>Why</H1><P>Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.</P><H1>When</H1><P>If your application uses a backend database server, then validate all input before it is passed to the database.</P><H1>How</H1><P>To properly validate input passed to database:</P><OL><LI><STRONG>Identify database entry points. </STRONG>Identify all locations within your application that interface with the database servers. Potential sources of input include: <UL><LI>URL-based parameters <LI>Form-based parameters <LI>Hidden fields <LI>Cookies <LI>Local filesystem <LI>Javascript variables</LI></UL><LI><P><STRONG>Create a set of validators.</STRONG></P><OL><LI><P>Build a set of validators that work with the database-specific language. Using the <A href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559">Validate Input for Length, Range, Format, and Type</A> guideline, determine the appropriate validation at each validator.</P><LI><P>Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the component.</P><LI><P>Place the validators along the database entry points. All data should pass through the validators before transmitted to the database servers.</P></LI></OL><LI><P><STRONG>Use type safe SQL parameters in queries. </STRONG>Stored procedures and parameterized queries improve your application's robustness against SQL injection based attacks. Consult the <A href="ruledisplay:9DF701E2-7929-4533-9DC3-368AAC4E553D">Use Type Safe SQL Parameters When Constructing SQL Queries</A> and <A href="ruledisplay:ADE80907-B490-4FD3-81A8-826117E25662">Use Stored Procedures</A> guidelines for more details.</P></LI></OL><H1>Problem Example</H1><P>The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input; therefore, an attacker can access the backend database on behalf of the application through the use of SQL injection. </P><BLOCKQUOTE><PRE>public void doGet(HttpServletRequest request,<BR>     HttpServletResponse response) throws ServletException, IOException&#123;<BR>     PrintWriter out = response.getWriter();<BR>     String query = request.getParameter("query");<BR>     String retData = "";<BR> <BR>     // The application fails to validate the user-supplied<BR>     // query before submitting it to the database server<BR>     retData = queryDB(query);<BR> <BR>     ...<BR> <BR>     out.flush();<BR>     out.close();<BR>&#125;</PRE></BLOCKQUOTE><H1>Solution Example</H1><P>The following code allows the user to query a database. Because the application validates the user's input, it is much more difficult for an attacker to access the backend database through a SQL injection attack.</P><BLOCKQUOTE><PRE>public void doGet(HttpServletRequest request,<BR>     HttpServletResponse response) throws ServletException, IOException&#123;<BR>     PrintWriter out = response.getWriter();<BR>     String query = request.getParameter("query");<BR>     String retData = "";<BR> <BR>     // The application validates the user-supplied query<BR>     // before submitting it to the database server<BR>     if (validateQuery(query))<BR>     &#123;<BR>          retData = queryDB(query);<BR> <BR>          ...<BR> <BR>     &#125;<BR> <BR>     out.flush();<BR>     out.close();<BR>&#125;<BR> <BR> <BR>public boolean validateQuery(String input)&#123;<BR> <BR>      // The input can be only of numeric characters<BR>      String goodPattern = "&#91;0-9&#93;&#43;&#43;";<BR> <BR>      Pattern p = Pattern.compile(goodPattern);<BR>      Matcher m = p.matcher(input);<BR> <BR>      if(&#33;m.matches())<BR>      &#123;<BR>            return false;<BR>      &#125;<BR> <BR>      return true;<BR>&#125;</PRE></BLOCKQUOTE><H1>Additional Resources</H1><UL><LI>A tutorial on regular expressions is available at <A href="http://www.regular-expressions.info/">Regular-Expressions.info</A>. <LI>For more information on using regular expression in Java, see: Documentation for <A href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html">Class Pattern</A> in Java SDK. </LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:65482066-7D67-44BD-B959-D962D527A89B">Checklist Item: All Database Input is Validated (Java Web Application)</A> <LI><A href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559">Guideline: Validate Input for Length, Range, Format, and Type (Java Web Application)</A> <LI><A href="ruledisplay:9DF701E2-7929-4533-9DC3-368AAC4E553D">Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries (Java Web Application)</A> <LI><A href="ruledisplay:ADE80907-B490-4FD3-81A8-826117E25662">Guideline: Use Stored Procedures (Java Web Application)</A> <LI><A href="ruledisplay:71225A92-ECA2-481E-ADEE-EA9C222DEA43">Guideline: Validate Input from All Sources (Java Web Application)</A> <LI><A href="ruledisplay:1D4FA7AF-33F0-40D9-9665-A31DBF3D7764">Attack: SQL Injection Attack</A> <LI><A href="ruledisplay:8515588C-661A-4962-853F-6CD6ABCD8CF6">Attack: Server-Side Code Injection Attack</A> <LI><A href="ruledisplay:D47CF578-0D27-4F11-B594-C508E50982B5">Checklist Item: All Data Passed Between Native and Java Code is Validated (Java Web Application)</A> </LI></UL>
]]></content></guidanceItem>