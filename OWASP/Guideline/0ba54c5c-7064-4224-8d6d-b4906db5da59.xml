<?xml version="1.0" encoding="utf-8"?><guidanceItem id="0ba54c5c-7064-4224-8d6d-b4906db5da59" type="guideline" title="Use Type Safe SQL Parameters When Constructing SQL Queries" cssFile="guidance.css" Date="2010-12-30T00:50:12.296875Z" Author="" Category="Data Access" filePath="..\Libraries\OWASP\Guideline\0ba54c5c-7064-4224-8d6d-b4906db5da59.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="Java" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>Applies to</H1><UL><LI>Applications written using Servlets or JSP&nbsp;that interact with a database.</LI></UL><H1>What to Do</H1><P>Use Prepared Statements to execute SQL statements. Do not generate SQL statements directly from user input.</P><H1>Why</H1><P>Parameterized Queries mitigate the number one risk for database-facing Web applications: SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database engine, not the actual application.</P><P>It exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (<STRONG>'</STRONG>) or double quote (<STRONG>"</STRONG>) characters). Using this method, an attacker inserts valid SQL statement fragments as part of user input so they, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating system. </P><P>Parameterized Queries offer a simple yet efficient mitigation since they automatically contain user-input in a non-escaped form, "compiling" the query and passing the input as parameters, much like a function call. There is no known method of injecting custom SQL over Parameterized Queries.</P><P>Additionally, using Parameterized queries offers two significant advantages:</P><UL><LI><STRONG>Greater Efficiency</STRONG>: The database engine needs to "compile" the statement only once, allowing for greater efficiency in query invocation. <LI><STRONG>Greater Security</STRONG>: The database engine automatically handles the parsing and embedding of user input, effectively negating any potential for SQL injection due to attackers taking advantage of delimiter characters such as a single quote (<STRONG>'</STRONG>) or a double quote (<STRONG>"</STRONG>). </LI></UL><H1>When</H1><P>Type-safe SQL parameters should be used whenever SQL statements need to be executed by the database. </P><H1>How</H1><P>One way of making the application less susceptible to SQL injection attacks is by using stored procedures. Stored procedures are subroutines stored in the database that are available to applications for accessing the data. </P><P>Just using stored procedures isn't a complete remedy for SQL injection. The important thing to do is use parameters with stored procedures, or else your stored procedures can be susceptible to SQL injection if they use unfiltered input. Stored procedures provide several security advantages: </P><UL><LI>By parameterizing input parameters and type-enforcing them, user input is effectively filtered. <LI>Stored procedures are allowed by most databases&nbsp;to execute under different security privileges than&nbsp;from the database user, thereby restricting the ability of the application to do anything beyond the actions specified in the stored procedures. For instance, an application would have execute access to a stored procedure but no access to the base tables. </LI></UL><P>To use type-safe SQL parameters, follow these steps:</P><OL><LI><P><STRONG>If possible, use stored procedures. </STRONG>Stored procedures are pre-compiled statements that are stored on the database server. Using stored procedures improves your application's performance and security. Consult the <A href="ruledisplay:ADE80907-B490-4FD3-81A8-826117E25662">Use Stored Procedures</A> guideline for more details.</P><LI><P><STRONG>Identify the SQL queries. </STRONG>Locate all SQL queries throughout your application. Example:</P><BLOCKQUOTE><PRE>Connection cn = MyApp.getDBConnection();<BR>Statement st = cn.createStatement();<BR>String query = "select login_attempts from myappUsers where user = \"" &#43; user<BR>             &#43; "\" and pass = \"" &#43; new String(passDigest) &#43; "\";";<BR>ResultSet rs = st.executeQuery(query);</PRE></BLOCKQUOTE><LI><P><STRONG>Identify the parameters in each SQL query. </STRONG>After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.</P><LI><P><STRONG>Use PreparedStatement. </STRONG>Java supports parameterized queries via its <STRONG>PreparedStatement</STRONG> class. <STRONG>PreparedStatement</STRONG> is mapped by most databases to a parameterized query or a stored procedure. Although the implementation may differ&nbsp;among databases, the functionality is the same. Turn all SQL queries into parameterized queries. To accomplish this, turn all <STRONG>Statement</STRONG> objects into <STRONG>PreparedStatement</STRONG> objects. For example, the SQL query from Step 1 would be:</P><BLOCKQUOTE><PRE>Connection cn = MyApp.getDBConnection();<BR>PreparedStatement st = cn.prepareStatement("select login_attempts from myappUsers"<BR>                     &#43; " where user = ? and pass = ?;");<BR>st.setString(1, user);<BR>st.setString(2, new String(passDigest));<BR>ResultSet rs = st.executeQuery();</PRE></BLOCKQUOTE><P>For more information, consult the documentation for <A href="http://java.sun.com/j2se/1.4.2/docs/api/java/sql/PreparedStatement.html">Class PreparedStatement</A> in the Java SDK.</P></LI></OL><H1>Problem Example</H1><P>The following code validates the user based on a given username and password. It hashes the password with a random salt, then it compares the username and the produced hash against the data stored in the backend database. Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.</P><BLOCKQUOTE><PRE>public boolean validateUser(String user, char&#91;&#93; pass)<BR>&#123;<BR>      // Hash the credentials before querying the credential store<BR>      // The application crafts the SQL query based on user's input<BR>      Connection cn = MyApp.getDBConnection();<BR>      Statement st = cn.createStatement();<BR>      String query = "select login_attempts from myappUsers where user = \""<BR>                    &#43; user &#43; "\" and pass = \"" &#43; passHash &#43; "\";";<BR>      ResultSet rs = st.executeQuery(query);<BR>       // Execute the rest of the authentication steps<BR>&#125;</PRE></BLOCKQUOTE><H1>Solution Example</H1><P>The following code validates the user based on given username and password. It hashes the password with a random salt, then it compares the username and the produced hash against the data stored in the backend database. Because the application uses <STRONG>PreparedStatement</STRONG>, it is much more difficult for an attacker to gain access to the application's database server through the use of SQL injection. </P><BLOCKQUOTE><PRE>public boolean validateUser(String user, char&#91;&#93; pass)<BR>&#123;<BR>      // Hash the credentials before querying the credential store<BR>      // The application uses parameterized queries<BR>      Connection cn = MyApp.getDBConnection();<BR>      PreparedStatement st = cn.prepareStatement("select user from myappUsers"<BR>                            &#43; " where user = ? and pass = ?;");<BR>      st.setString(1, user);<BR>      st.setString(2, passHash);<BR>      ResultSet rs = st.executeQuery();<BR>       // Execute the rest of the authentication steps<BR>&#125;</PRE></BLOCKQUOTE><H1>Additional Resources</H1><UL><LI>To learn more about using parameterized queries in Java, see: Documentation for <A href="http://java.sun.com/j2se/1.4.2/docs/api/java/sql/PreparedStatement.html">Interface PreparedStatement</A>. <LI>For more information about preventing SQL injection attacks, visit: <A href="http://www.owasp.org/index.php/Reviewing_Code_for_SQL_Injection">Reviewing Code for SQL Injection</A> from OWASP. <LI>To learn more about SQL server security, visit: <A href="http://www.sqlsecurity.com/">SQLSecurity.com</A>.</LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:ADE80907-B490-4FD3-81A8-826117E25662">Guideline: Use Stored Procedures (Java Web Application)</A> <LI><A href="ruledisplay:81491E66-67B7-49F3-BDA6-4B4C9245C702">Guideline: Validate All Input Passed to Database (Java Web Application)</A> <LI><A href="ruledisplay:D089D9CA-860C-4F98-BC7E-5AD7553DB6DD">Checklist Item: Client-Side Validation is Not Relied On (Java Web Application)</A> <LI><A href="ruledisplay:AA3B4801-99BA-43B0-90A6-D38A605E8574">Checklist Item: Type Safe SQL Parameters are Used (Java Web Application)</A> <LI><A href="ruledisplay:8515588C-661A-4962-853F-6CD6ABCD8CF6">Attack: Server-Side Code Injection Attack</A></LI></UL>
]]></content></guidanceItem>