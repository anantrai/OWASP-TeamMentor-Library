<?xml version="1.0" encoding="utf-8"?><guidanceItem id="616fda5d-4e96-4bc0-8675-954794f52557" type="guideline" title="Validate All Input Passed to Database" cssFile="guidance.css" Date="2010-09-29T18:56:03.515625Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\Guideline\616fda5d-4e96-4bc0-8675-954794f52557.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Do</H1><P>Validate all input before it is passed to the database.</P><H1>Why</H1><P>Unvalidated input can lead to persistent cross-site scripting, SQL injection, and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.</P><H1>When</H1><P>If your application uses a backend database server.</P><H1>How</H1><P>To properly validate input passed to database:</P><OL><LI><P><STRONG>Identify application inputs. </STRONG>Potential sources of input include:</P><UL><LI>URL based parameters <LI>Form based parameters <LI>Hidden fields <LI>Cookies <LI>Local filesystem <LI>Javascript variables</LI></UL><LI><P><STRONG>Identify database entry points.</STRONG> Find all the locations in the system where data is pushed into the database, either directly via queries, or indirectly (via log entries, etc). Trace all database entry points to find all the paths which can contain external input.</P><LI><P><STRONG>Create a set of validators:</STRONG> Build a set of validators that work with the data in question and fit into the system architecture, including your general validation scheme for other data and the way the system interacts with the database. Using the <A href="ruledisplay:D06E3B85-CCD8-41EC-8861-36D30BBAE909">Validate Input for Length, Range, Format, and Type</A> guideline, determine the appropriate validation at each validator. Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the system, and allows for easy auditing. Place the validators along the database input paths, ideally as close to the initial data input as possible. All data should pass through the validators before breing transmitted to the database servers.</P><LI><P><STRONG>Use Type-Safe parameters in SQL statements:</STRONG> Stored procedures and Parameterized queries improve your application's robustness against SQL injection based attacks. Consult the guideline <A href="ruledisplay:3437DF81-6B8C-4A14-BB6E-34F6EE21C45F">Use Type Safe SQL Parameters When Constructing SQL Queries</A>.</P><LI><P><STRONG>Audit your entry paths.</STRONG> Before going into production, have a reviewer who was not responsible for the development of the code in question check all the input paths to ensure that the validators are correctly implemented, that they are correctly applied, and that all input paths are checked.</P></LI></OL><H1>Problem Example</H1><P>The following code validates the user based on a given username and password. It hashes the password with a random salt. Then it compares the username and the produced hash against the data stored in the backend database. Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.</P><PRE>public boolean validateUser(String user, char&#91;&#93; pass)<BR>&#123;<BR>      byte&#91;&#93; salt = MyApp.generateSalt();<BR>      String passHash;<BR>      SqlConnection cn;<BR>      SqlCommand sqlCommand;<BR>      String query;<BR>      passHash = hashCredentials(pass, salt);<BR>      // The application crafts the SQL query based on user's input<BR>      cn = MyApp.getDBConnection();<BR>      sqlCommand = new SqlCommand("select user from myappUsers where user = \""<BR><BR>      &#43; user &#43; "\" and pass = \"" &#43; passHash &#43; "\" and login_attempts &lt; 3;", cn);<BR>      SqlDataReader reader = sqlCommand.ExecuteReader();<BR>      updateLastLoginAttempt(user);<BR>      ...<BR>&#125;</PRE><P>If a user submits a login request with a username of 'foo\" or 1 = 1; drop table &#42;; --', the system will happily first authenticate the user and then drop all the tables in the database.</P><H1>Solution Example</H1><P>The following code validates the user based on a given username and password. It hashes the password with a random salt. Then it compares the username and the produced hash against the data stored in the backend database. Because the application uses the Parameters property, it is much more difficult for an attacker to gain access to the application's database server through the use of SQL injection. </P><PRE>public boolean validateUser(String user, char&#91;&#93; pass)<BR>&#123;<BR>   byte&#91;&#93; salt = MyApp.generateSalt();<BR>   String passHash; <BR>   SqlConnection cn;<BR>   SqlCommand sqlCommand;<BR>   String query;     <BR>   passHash = hashCredentials(pass, salt);<BR>   // The application crafts the SQL query based on user's input<BR>   cn = MyApp.getDBConnection();<BR>   sqlCommand = new SqlCommand("select user from myappUsers where user = &#64;user and <BR>                    &#43; pass = &#64;passHash and login_attempts &lt; 3;", cn);<BR>   sqlCommand.Parameters.Add("&#64;user", SqlDbType.VarChar, user.Length).Value = user;<BR>   sqlCommand.Parameters.Add("&#64;passHash ", SqlDbType.VarChar, passHash.Length).Value = passHash;<BR>   SqlDataReader reader = sqlCommand.ExecuteReader(); <BR>   updateLastLoginAttempt(user);  <BR>   ...<BR>&#125;</PRE><P>Even if the user passes in an arbitrary string for a username or a password, they will not be able to alter the query or otherwise effect the database. An even better solution would involve using a stored procedure instead of a parameterized command, because that would permit the database to be locked down further.</P><H1>Additional Resources</H1><UL><LI>To learn more about using regular expression for input validation, visit: <A href="http://msdn2.microsoft.com/en-us/library/ms998267.aspx">How To: Use Regular Expressions to Constrain Input in ASP.NET</A>. </LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:3437DF81-6B8C-4A14-BB6E-34F6EE21C45F">Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries </A><LI><A href="ruledisplay:D06E3B85-CCD8-41EC-8861-36D30BBAE909">Guideline: Validate Input for Length, Range, Format, and Type&nbsp;</A> <LI><A href="ruledisplay:0FFC3880-7F2B-47A5-BC54-F9BD39117BDD">Guideline: Validate Input from All Sources </A><LI><A href="ruledisplay:8F360E73-D932-4512-84B4-2D7A6632DA7F">Guideline: Use Stored Procedures </A><LI><A href="ruledisplay:1D4FA7AF-33F0-40D9-9665-A31DBF3D7764">Attack: SQL Injection Attack</A> <LI><A href="ruledisplay:8515588C-661A-4962-853F-6CD6ABCD8CF6">Attack: Server-Side Code Injection Attack</A> <LI><A href="ruledisplay:A61D6E7C-677C-463D-BB5D-7F36CAD4FF32">Checklist Item: All Database Input is Validated</A> <HR></LI></UL><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>