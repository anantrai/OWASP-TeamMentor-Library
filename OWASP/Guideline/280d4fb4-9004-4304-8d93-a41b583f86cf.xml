<?xml version="1.0" encoding="utf-8"?><guidanceItem id="280d4fb4-9004-4304-8d93-a41b583f86cf" type="guideline" title="Do Not Rely on Client-side Validation" cssFile="guidance.css" Date="2010-10-03T05:22:36.515625Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\Guideline\280d4fb4-9004-4304-8d93-a41b583f86cf.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Do</H1><P>Do not rely on client-side validation for security purposes. Use server-side validation to ensure that data is safe and perform security decisions based on that. Client-side validation&nbsp;should be used solely to&nbsp;reduce round trips to the server and to improve the user experience.&nbsp;&nbsp;&nbsp;&nbsp; </P><H1>Why</H1><P>Client side validation can be easily bypassed. For example, a malicious user could disable&nbsp;the client-side script routines by disabling JavaScript.&nbsp;Users&nbsp;may also construct their own&nbsp;form posts using custom html, or&nbsp;using an&nbsp;HTTP proxy to modify form posts.&nbsp;&nbsp;If developers rely on the controls in the client's user interface and do not validate all results on the back end, it may introduce injection vulnerabilities that would allow an attacker to bypass data input restrictions and gain access to unintended application functionality.</P><H1>When</H1><P>During implementation, ensure all input from&nbsp;the client is&nbsp;validated, even if the input is not stored.</P><H1>How</H1><P>It's important to specify what input is acceptable, rather then trying to specify all&nbsp;the&nbsp;variations&nbsp;of input that are&nbsp;illegal (whitelisting as opposed to blacklisting).&nbsp;Use ASP.NET validator controls to check user input on the server side and provide feedback to the user when input fails to pass validation requirements.&nbsp;Follow these steps on each form page in an application: </P><OL><LI><P><STRONG>Determine the required fields.</STRONG> Use the required field validator control to ensure all required fields are present. Here is an example that declares a textfield in an ASP page that is a required field:</P><PRE>&lt;td&gt;<BR>&nbsp;&nbsp; &lt;asp:RequiredFieldValidator runat=server <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlToValidate=txtName<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ErrorMessage="User ID is required."&gt; &#42;<BR>&nbsp;&nbsp; &lt;/asp:RequiredFieldValidator&gt;<BR>&lt;/td&gt;<BR>&lt;td&gt;User ID:&lt;/td&gt;<BR>&lt;td&gt;&lt;input type=text runat=server id=txtName&gt;&lt;/td&gt;</PRE><P>The &#42; is displayed next to the label if the input is blank. The error message is reported in a summary. The "ControlToValidate" property specifies the ID of the control to validate. The final step is to add a validation summary to the top of the page like so:</P><PRE>&lt;asp:ValidationSummary runat=server <BR>HeaderText="There were errors on the page:" /&gt;<BR></PRE><LI><P><STRONG>Enforce numeric range&nbsp;constraints.</STRONG> Use the RangeValidator control to ensure any numeric values are constrained to a specific, acceptable&nbsp;range. Here is an example that declares an integer field&nbsp;in an ASP page that has&nbsp;a valid range from 1 to 50:</P><PRE>&lt;td&gt;</PRE><PRE>  &lt;asp:RangeValidator id="Range1"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlToValidate="txtState"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinimumValue="1"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaximumValue="50"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Type="Integer"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EnableClientScript="false"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text="The value must be from 1 to 10&#33;"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; runat="server"&gt; &#42; </PRE><PRE>&nbsp; &lt;/asp:RangeValidator&gt;<BR>&lt;/td&gt;<BR>&lt;td&gt;State:&lt;/td&gt;<BR>&lt;td&gt;&lt;input type=text runat=server id=txtState&gt;&lt;/td&gt;</PRE><LI><P><STRONG>Validate&nbsp;verification fields.</STRONG> Fields such as password entry are often verified by having the user re-type them to ensure they are correct. Use the CompareValidator control to make the comparisons and ensure validity/integrity. Here is an example that declares&nbsp;two password&nbsp;fields&nbsp;in an ASP page that&nbsp;must match in order to validate properly:</P><PRE>&lt;asp:CompareValidator runat=server<BR>            ControlToValidate=txtRePWord<BR>            ControlToCompare=txtPWord<BR>             ErrorMessage="Passwords do not match." /&gt;</PRE><P>In this case, the two fields being compared are "txtPWord" and "txtRePWord". If they do not&nbsp;match, validation fails with the error message, "Passwords do not match.".&nbsp;</P><LI><P><STRONG>Enforce type constraints on string fields.</STRONG> String fields are the most difficult type of input to effectively validate because the range of acceptable&nbsp;characters is much larger then numeric&nbsp;and enumerated types. Regular expression provide a flexible mechanism for dictating valid patterns and characters. Use the RegularExpressionValidator to perform a variety of checks on string-based fields such as zip codes and phone numbers.&nbsp; Here is an example that declares an&nbsp;text field&nbsp;in an ASP page that should represent a five digit zip code, consisting entirely of numberic digits, and a validator to enforce those constraints:</P><PRE>&lt;input type=text runat=server id=txtZip&gt;<BR>      &lt;asp:RegularExpressionValidator runat=server<BR>             ControlToValidate="txtZip"<BR>             ErrorMessage="Zip code must be 5 digits, all numbers."<BR>             ValidationExpression="&#91;0-9&#93;&#123;5&#125;"&gt; &#42; </PRE><PRE>      &lt;/asp:RegularExpressionValidator&gt;</PRE><PRE>&lt;td&gt;Zip code:&lt;/td&gt;<BR>&lt;td&gt;&lt;input type=text runat=server id=txtZip&gt;&lt;/td&gt;</PRE><LI><P><STRONG>Use custom validation to handle remaining&nbsp;input constraints.</STRONG> The built-in ASP.NET&nbsp;validation controls handle&nbsp;most of the cases that commonly arise in&nbsp;web applications, but there&nbsp;may be&nbsp;times when they are not appropriate.&nbsp;The CustomValidator enables custom validation code that can plugs into the existing validation system.&nbsp;Here is an example that declares a&nbsp;text field&nbsp;in an ASP page. For this particular text field, there is business logic that needs to be satisfied which is not easily constrainable by the&nbsp;other&nbsp;validation constructs, so a&nbsp;custom validator is implementated that ensures the&nbsp;string&nbsp;in the text field&nbsp;does not start&nbsp;with the letter "a":</P><PRE>&lt;&#37;&#64; Page Language="vb" &#37;&gt;<BR>&lt;script runat=server&gt;</PRE><PRE>public sub CheckID(source as Object, args as ServerValidateEventArgs)<BR>&nbsp;&nbsp;&nbsp; args.IsValid = args.Value.substring(0, 1).tolower() &lt;&gt; "a"<BR>end sub </PRE><PRE>&lt;/script&gt;</PRE><P>To call this function, add a CustomValidator, which is designed to call developer code to perform its check. Here is the declaration:</P><PRE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:CustomValidator runat=server<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controltovalidate="txtName" <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errormessage="ID is already in use." <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnServerValidate="CheckID" /&gt;</PRE><P>It is worth noting that this could have been done with the RegularExpression validation control, but in this case it makes more sense to use custom validation since&nbsp;a type of high-level validation that could conceivably be more complex then a simple pattern match is being defined (e.g., the validation rules might change based on application state).&nbsp;</P><LI><P><STRONG>Use the Regex class to validate other sources</STRONG></P><P>Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks. Use regular expressions to help validate input. The following example shows how to use the <B>Regex</B> class. </P><PRE>using System.Text.RegularExpressions ;<BR> // Instance method:Regex reg = new Regex(&#64;"&#94;&#91;a-zA-Z'.\s&#93;&#123;1,40&#125;&#36;");<BR>Response.Write(reg.IsMatch(Request.QueryString&#91;"Name"&#93;));<BR>// Static method:<BR>if (&#33;Regex.IsMatch(Request.QueryString&#91;"Name"&#93;,&#64;"&#94;&#91;a-zA-Z'.\s&#93;&#123;1,40&#125;&#36;"))<BR> &#123;<BR>   // Name does not match expression<BR> &#125;</PRE><P>If you cannot cache your regular expression for frequent use, you should use the static <STRONG>IsMatch</STRONG> method where possible for performance reasons, to avoid unnecessary object creation.</P></LI></OL><H1>Problem Example</H1><P>Consider a very simple form for an online shopping cart. The cart component consists of two components:</P><OL><LI><P>An HTML form that contains all of the fields that make up the order to be submitted for processing:</P><PRE>&lt;html&gt;<BR>  &lt;head&gt;<BR>    &lt;title&gt;Widget shopping cart&lt;/title&gt;<BR>  &lt;/head&gt;<BR>  &lt;body&gt;<BR>&nbsp;&nbsp;  &lt;H1&gt;welcome to the most boring shopping cart on the web&#33;&lt;/H1&gt; </PRE><PRE>    A widget's current price is &#36;19.95 USD. Please use the following form to submit an order.</PRE><PRE>    &lt;form action="process_order.aspx" method="POST"&gt;  <BR>      &lt;p&gt;Please enter the number of widgets you would like to purchase:&lt;/p&gt;<BR>&nbsp;&nbsp;&nbsp;   quantity:&lt;br/&gt;<BR>&nbsp;&nbsp;&nbsp;  &nbsp;&lt;select name="WidgetQuantity"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp; &lt;option value="1"&gt;1&lt;/option&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &lt;option value="2"&gt;2&lt;/option&gt; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &lt;option value="3"&gt;3&lt;/option&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &lt;option value="4"&gt;4&lt;/option&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/select&gt;</PRE><PRE>      ...<BR>      &lt;input type="submit" value="order"/&gt;<BR>    &lt;/form&gt;</PRE><PRE>  &lt;/body&gt;<BR>&lt;/html&gt;</PRE><LI><P>An ASP.NET page that processes the form submissions and performs the necessary steps to create the order.</P><PRE>int&nbsp;dQuantity = Request("WidgetQuantity");<BR>double dPrice = 19.95;</PRE><PRE>double dCost = dQuantity &#42; dPrice;</PRE><P>This server side page is problematic because it lacks validation to ensure the quantity field is correct.&nbsp;The application&nbsp;works fine in the case where a user plays by the rules and submits the form as it is shown, because the&nbsp;quantity field ensures that the range constraints for the order quantity are always valid.&nbsp;However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also&nbsp;might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs&nbsp;later on.</P></LI></OL><H1>Solution Example</H1><P>Consider the following ASP.NET page that processes the form submissions and performs the necessary steps to create an order:</P><PRE>&lt;&#37;&#64; Page Language="vb" &#37;&gt;<BR>&lt;script runat=server&gt;<BR>public sub OnSubmit(source as Object, e as EventArgs)<BR>&nbsp;&nbsp;&nbsp; if Page.IsValid then<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Now we can perform our transaction.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int dQuantity = Request("WidgetQuantity");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double dPrice = 19.95;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double dCost = dQuantity &#42; dPrice;<BR>&nbsp;&nbsp;&nbsp; end if<BR>end sub<BR>&lt;/script&gt;<BR>&lt;html&gt;<BR>&lt;head&gt;<BR>&lt;title&gt;Validation Sample&lt;/title&gt;<BR>&lt;/head&gt;<BR>&lt;body&gt;</PRE><PRE>&lt;form runat=server&gt;<BR>&lt;asp:ValidationSummary runat=server headertext="There were errors on the page:" /&gt;</PRE><PRE>&lt;table&gt;<BR>&nbsp; &lt;tr&gt;<BR>&nbsp;&nbsp;&nbsp; &lt;td&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:RequiredFieldValidator runat=server <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controltovalidate="WidgetQuantity"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errormessage="WidgetQuantity is required."&gt;&#42;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:RequiredFieldValidator&gt;<BR>&nbsp;&nbsp;&nbsp; &lt;/td&gt;<BR>&nbsp;&nbsp;&nbsp; &lt;td&gt;A widget's current price is &#36;19.95 USD. Please use the following form to submit an order.&lt;/td&gt;<BR>&nbsp;&nbsp;&nbsp; &lt;td&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;select name="WidgetQuantity"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;option value="1"&gt;1&lt;/option&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;option value="2"&gt;2&lt;/option&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option value="3"&gt;3&lt;/option&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;option value="4"&gt;4&lt;/option&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/select&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:RegularExpressionValidator runat=server display=dynamic<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controltovalidate="WidgetQuantity"&nbsp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errormessage="WidgetQuantity must be a non-zero, positive integer." <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; validationexpression="&#91;1-9&#93;&#123;1&#125;&#91;0-9&#93;&#123;0,7&#125;" /&gt;</PRE><PRE>&nbsp;&nbsp;&nbsp; &lt;/td&gt;<BR>&nbsp; &lt;/tr&gt;<BR>...<BR>&lt;/table&gt;&lt;br&gt;<BR>&lt;input type=submit runat=server id=cmdSubmit value=Submit onserverclick=OnSubmit&gt;<BR>&lt;/form&gt;<BR>&lt;/body&gt;<BR>&lt;/html&gt;</PRE><P>The ASP.NET Validator control provides client-side validation to reduce roundtrips to the server and improve user experience, but also provides server-side validation to&nbsp;&nbsp;ensure that the widget quantity field is&nbsp;a positive integer. It is also validated as a required field that must be provided before submitting the order.</P><H1>Additional Resources</H1><UL><LI><A href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnaspp/html/pdc_userinput.asp">User Input Validation in ASP.NET&nbsp;</A> <LI><A href="http://msdn2.microsoft.com/en-us/library/e5a8xz39.aspx">Validation Server Control Syntax </A><LI><A href="http://en.wikipedia.org/wiki/Code_injection">General Purpose Code Injection article </A></LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:a1fc05ee-63a4-4568-b273-6ad485494a05"><A href="ruledisplay:4cfb84e3-b640-44c1-8950-cc38262ce118">Application Does Not Rely Only on Request Validation</A></A> <LI><A href="ruledisplay:3f4ffd45-82e9-4bb3-8792-5d2ccc664dbe">Free Form Input is Sanitized to Protect Against Malicious Data</A> <LI><A href="ruledisplay:417133af-0ab8-4ad5-9aea-a59b08abf022">All the Input is Validated For Length, Range, Format, and Type</A></LI></UL><HR><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>