<?xml version="1.0" encoding="utf-8"?><guidanceItem id="a94e0193-b5ab-43e0-b6b1-8e7f0ce69206" type="guideline" title="Protect Sensitive Data Over the Network" cssFile="guidance.css" Date="2010-12-29T23:48:43.859375Z" Author="" Category="Sensitive Data" filePath="..\Libraries\OWASP\Guideline\a94e0193-b5ab-43e0-b6b1-8e7f0ce69206.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="Java" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>Applies to</H1><UL><LI>Applications written using Servlets or JSP.</LI></UL><H1>What to Do</H1><P>Use encryption to protect sensitive data that is transmitted over the network. </P><H1>Why</H1><P>Because network traffic&nbsp;is easily eavesdropped on or modified by attackers, passing sensitive data as plaintext&nbsp;over the network&nbsp;can lead&nbsp;to a host of attacks, including data theft and data manipulation.</P><H1>When</H1><P>Apply this guideline when your application transmits sensitive data over unprotected communication channels.</P><H1>How</H1><P>Use the following steps to protect sensitive data over the network:</P><OL><LI><P><STRONG>Identify sensitive information. </STRONG>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</P><UL><LI>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. <LI>Information that a user provides that they would not want shared with other users of the application. <LI>Information that comes from an external trusted source that is not designed to be shared with users.</LI></UL><LI><P><STRONG>Choose an appropriate protection mechanism. </STRONG>Choosing the appropriate protection mechanism may depend on various conditions: purpose of the sensitive data, role of the other network party, infrastructure and supported technologies. Because sensitive data must be encrypted when in transit, there are two strategies, to encrypt the communication channel or to encrypt the application data:</P><UL><LI><P><STRONG>Encrypt the communication channel</STRONG>: Depending on the current infrastructure and the other network party, it is possible to encrypt the connections using Java's crypto library or any technologies supported by the remote party. For more information, consult the <A href="ruledisplay:5E283FD0-1A55-4DC3-971D-BF7C3318E7CB">Encrypt Communication Links</A> guideline.</P><LI><P><STRONG>Encrypt the application data</STRONG>: If your application's communication channels cannot be encrypted, encrypt the application data. Hashing or encryption should be used when protecting the application data. Use hashing if the application data will be used only for comparison purposes. Use encryption if the application data will be retrieved at a later stage.</P><P>If hashing is used, choose a longer salt, 16 or more bits.&nbsp;In the case&nbsp;that the produced hash is compromised, longer salts make it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Always use <STRONG>SecureRandom</STRONG> and not <STRONG>Random</STRONG> to generate the salt. Example of using <STRONG>SecureRandom</STRONG> to generate a random salt:</P><BLOCKQUOTE><PRE>public static byte&#91;&#93; generateSalt() throws NoSuchAlgorithmException<BR>&#123;<BR>      // Note that salt is declared as private static byte&#91;&#93; and is<BR>      // initialized to null.<BR>      if (salt == null)<BR>      &#123;<BR>            SecureRandom srand = SecureRandom.getInstance("SHA1PRNG");<BR>                          salt = new byte&#91;4&#93;;<BR>            srand.nextBytes(salt);<BR>      &#125;<BR>       return salt;<BR>&#125;</PRE></BLOCKQUOTE><P>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-256 or stronger.</P><BLOCKQUOTE><PRE>public String hashCredentials(char&#91;&#93; pass, byte&#91;&#93; salt)<BR>      throws GeneralSecurityException, IOException<BR>&#123;<BR>      MessageDigest md;<BR>      byte&#91;&#93; tempPass;<BR>      byte&#91;&#93; digest;<BR>            md = MessageDigest.getInstance("SHA-512");<BR>      //Convert char&#91;&#93; to byte&#91;&#93;<BR>      tempPass = new byte&#91;pass.length&#93;;<BR>      for (int i = 0; i &lt; pass.length; i&#43;&#43;)<BR>      &#123;<BR>            tempPass&#91;i&#93; = (byte)pass&#91;i&#93;;<BR>      &#125;<BR>      md.update(tempPass);<BR>      md.update(salt);<BR>      digest = md.digest();<BR>      md.reset();<BR>      //Clean tempPass<BR>      for (int i = 0; i &lt; tempPass.length; i&#43;&#43;)<BR>      &#123;<BR>            tempPass&#91;i&#93; = 0;<BR>      &#125;<BR>       return new String(digest);<BR>&#125;</PRE></BLOCKQUOTE><P>Use encryption if the application data will be retrieved at a later stage.<BR><BR>Use symmetric encryption if and only if your application is the only entity that will access the encrypted data. Use a key size of 265-bit or higher and AES for symmetric encryption.<BR><BR>Use public/private key encryption if the data will be accessed by two or more parties. Use a key size of 2048-bit or higher and RSA for public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key.</P><PRE>// Because the following code generates a new encryption key,<BR>// make sure to store it into the application's keystore.<BR>// Follow the <A href="ruledisplay:235E588E-621B-4C5E-A50E-8EA447330AD0">Use a Secure Key Storage Location</A> guideline.<BR>KeyGenerator kgen = KeyGenerator.getInstance("AES");<BR>kgen.init(256);<BR>SecretKey skey = kgen.generateKey();<BR>// Set up cipherCipher cipher = Cipher.getInstance("AES");<BR>cipher.init(Cipher.ENCRYPT_MODE, skey);<BR>// Note that sensitiveData is of type byte&#91;&#93; and contains<BR>// data that is sensitive in naturebyte&#91;&#93; encrypted = cipher.doFinal(sensitiveData);</PRE></LI></UL><LI><P><STRONG>Apply the appropriate protection mechanism</STRONG>. Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location.</P><BLOCKQUOTE><PRE>try<BR>&#123;<BR>      // The application produces a hash based on the sensitive data<BR>      userEmail = MyApp.getEmailForUser(user);<BR>      passDigest = encryptCredentials(userEmail, pass, salt);<BR>&#125;<BR>catch (GeneralSecurityException gse)<BR>&#123;<BR>      // Add the appropriate logging and exception handling mechanisms<BR>      return false;&#125;catch (IOException ioe)<BR>&#123;<BR>      // Add the appropriate logging and exception handling mechanisms<BR>      return false;<BR>&#125;<BR>// The application stores the hashed sensitive data into the database<BR>Connection cn = MyApp.getDBConnection();<BR>PreparedStatement st = cn.prepareStatement("select login_attempts from myappUsers"<BR>                                        &#43; " where user = ? and pass = ?;");<BR>st.setString(1, user);<BR>st.setBytes(2, passDigest);<BR>ResultSet rs = st.executeQuery();</PRE></BLOCKQUOTE></LI></OL><P><STRONG>Note:</STRONG> PCI DSS requirements state that all sensitive data must be encrypted before being sent over the network or be sent over an encrypted channel.</P><H1>Problem Example</H1><P>The following code authenticates a user based on a username and password. The supplied credentials are compared to the credentials stored in the backend database. Unfortunately, the credentials are transmitted in plaintext and could be stolen if the network is compromised.</P><BLOCKQUOTE><PRE>public boolean validateUser(String user, char&#91;&#93; pass)<BR>&#123;<BR>      // Query the credential store with the provided credentials<BR>      ...<BR>&#125;</PRE></BLOCKQUOTE><H1>Solution Example</H1><P>The following code validates the user based on&nbsp;a given username and password. It uses the user's valid email address and a random salt to encrypt the user's password before comparing&nbsp;the username and the produced digest against the data stored in the backend database. Therefore, the password is encrypted before being transmitted over the network and is protected from being compromised.</P><BLOCKQUOTE><PRE>public boolean validateUser(String user, char&#91;&#93; pass)<BR>&#123;<BR>       ...<BR>       // Encrypt the credentials<BR>      try<BR>      &#123;<BR>            userEmail = MyApp.getEmailForUser(user);<BR>            passDigest = encryptCredentials(userEmail, pass, salt);<BR>      &#125;<BR>      catch (GeneralSecurityException gse)<BR>      &#123;<BR>            // Add the appropriate logging and exception handling mechanisms<BR>            return false;<BR>      &#125;<BR>     catch (IOException ioe)<BR>      &#123;<BR>            // Add the appropriate logging and exception handling mechanisms<BR>            return false;<BR>      &#125;<BR>       // Query the credential store and execute the rest of the authentication steps<BR>      ...<BR>&#125;<BR>public static byte&#91;&#93; encryptCredentials(String email, char&#91;&#93; pass, byte&#91;&#93; salt)<BR>      throws GeneralSecurityException, IOException<BR>&#123;<BR>      MessageDigest md; <BR>      byte&#91;&#93; tempPass;<BR>      byte&#91;&#93; rawKey;<BR>      // Generate encryption key<BR>      md = MessageDigest.getInstance("SHA-512");<BR>      md.update(email.getBytes("UTF-8"));<BR>      md.update(salt);<BR>      rawKey = md.digest();<BR>      md.reset();<BR>      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<BR>      // Set up cipher<BR>      Cipher cipher = Cipher.getInstance("AES");<BR>      cipher.init(Cipher.ENCRYPT_MODE, skeySpec);<BR>      // Convert char&#91;&#93; to byte&#91;&#93;<BR>      tempPass = new byte&#91;pass.length&#93;;<BR>      for (int i = 0; i &lt; pass.length; i&#43;&#43;)<BR>      &#123;<BR>            tempPass&#91;i&#93; = (byte)pass&#91;i&#93;;<BR>      &#125;<BR>      // Encrypt password<BR>      byte&#91;&#93; encrypted = cipher.doFinal(tempPass);<BR>            //Clean tempPass<BR>      for (int i = 0; i &lt; tempPass.length; i&#43;&#43;)<BR>      &#123;<BR>            tempPass&#91;i&#93; = 0;<BR>      &#125;<BR>      return encrypted;<BR>&#125;</PRE></BLOCKQUOTE><H1>Additional Resources</H1><UL><LI>To learn more about the JCE API, see: <A href="http://java.sun.com/products/jce/index-14.html">Java Cryptography Extension for the Java 2 SDK, v 1.4</A>. <LI>For more information about securely generating random numbers, see: Documentation for <A href="http://download.oracle.com/javase/1.4.2/docs/api/java/security/SecureRandom.html">Class SecureRandom</A> in Java SDK. <LI>To learn more about JSSE, see: <A href="http://java.sun.com/j2se/1.4.2/docs/guide/security/jsse/JSSERefGuide.html">Java Secure Socket Extension (JSSE) Reference Guide</A>.</LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:5E283FD0-1A55-4DC3-971D-BF7C3318E7CB">Guideline: Encrypt Communication Links (Java Web Application)</A> <LI><A href="ruledisplay:235E588E-621B-4C5E-A50E-8EA447330AD0">Guideline: Use a Secure Key Storage Location (Java Web Application)</A> <LI><A href="ruledisplay:ED6F49C0-E021-459E-AE4F-9116CA8E8073">Guideline: Use SSL When Transmitting Credentials (Java Web Application)</A> <LI><A href="ruledisplay:5F929DD7-759F-4412-A9B1-08567CDE9035">Attack: Network Eavesdropping Attack</A> <LI><A href="ruledisplay:48BB4D3A-9295-4263-B3E7-090E483DEC5D">Attack: Man in the Middle Attack</A> <LI><A href="ruledisplay:13EE90D9-B0F6-45D6-913A-BA8527525A04">Attack: Traffic Analysis Attack</A> <LI><A href="ruledisplay:4572037A-2166-4AD1-8E73-D623E468A7B9">Attack: Information Disclosure Attack</A> <LI><A href="ruledisplay:B47A6486-A73E-44B9-AD17-1F7F94199828">Attack: Network Credential Sniffing Attack</A> <LI><A href="ruledisplay:92148CDE-33B9-4725-882F-0C2C245510BA">Checklist Item: Sensitive Data is Protected Over the Network (Java Web Application)</A> </LI></UL>
]]></content></guidanceItem>