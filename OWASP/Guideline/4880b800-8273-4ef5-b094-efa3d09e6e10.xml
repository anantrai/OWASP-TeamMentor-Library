<?xml version="1.0" encoding="utf-8"?><guidanceItem id="4880b800-8273-4ef5-b094-efa3d09e6e10" type="guideline" title="Encode All Output Data" cssFile="guidance.css" Date="2010-12-29T23:28:06.3125Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\Guideline\4880b800-8273-4ef5-b094-efa3d09e6e10.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="Java" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>Applies to</H1><P>Applications written using Servlets or JSP.</P><H1>What to Do</H1><P>Encode all input that is displayed back to the user.</P><H1>Why</H1><P>Encoding echoed input prevents injection attacks such as cross-site scripting.</P><H1>When</H1><P>If user input will be echoed back to the client in any way, encode it first. This includes input that is immediately echoed back as well as input that is stored first (such as in a database) before being echoed back later.</P><H1>How</H1><P>Encoding the echoed user input prevents injection attacks such as cross-site scripting. Use the following steps to ensure all echoed input is encoded:</P><OL><LI><P><STRONG>Identify all echoed input. </STRONG>Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of reflective or persistent nature:</P><UL><LI><STRONG>Reflective</STRONG>: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results. <LI><STRONG>Persistent</STRONG>: In a persistent setting, the input is stored and returned to the client at a different stage in your application. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.</LI></UL><LI><P><STRONG>Determine the&nbsp;type of encoding. </STRONG>After identifying all echoed input, determine how the input is returned to client. Because input can take the form of HTML content or URLs, your application needs to use different encoding techniques:</P><UL><LI><P><STRONG>URL encoding</STRONG>: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, <STRONG>&lt;</STRONG> is represented by <STRONG>&#37;3C</STRONG> where <STRONG>3C</STRONG> is the ASCII value for <STRONG>&lt;</STRONG>:</P><BLOCKQUOTE><PRE>String encodedUrl = URLEncoder.encode(url);</PRE></BLOCKQUOTE><LI><P><STRONG>HTML encoding</STRONG>: HTML encoding is used when the echoed input is returned as regular text or HTML content. Input should be encoded by substituting certain characters with their respective HTML values:</P><BLOCKQUOTE><TABLE><TBODY><TR><TD>Character</TD><TD>HTML value</TD></TR><TR><TD>&lt;</TD><TD>&amp;lt;</TD></TR><TR><TD>&gt;</TD><TD>&amp;gt;</TD></TR><TR><TD>&amp;</TD><TD>&amp;amp;</TD></TR><TR><TD>"</TD><TD>&amp;quot;</TD></TR></TBODY></TABLE></BLOCKQUOTE><P>JSP can also HTML encode a string through the use of <STRONG>&#123; &#125;</STRONG> around the variable. <STRONG>&#123; &#125;</STRONG> invoke JSP's built-in HTML encoder which takes the variable between the brackets as its input. Example: </P><BLOCKQUOTE><PRE>&lt;&#37;= &#123;output&#125; &#37;&gt;</PRE></BLOCKQUOTE></LI></UL><LI><P><STRONG>Apply the encoding. </STRONG>After identifying the echoed input and determining the appropriate encoding method, apply the encoding before the input is returned to the client.</P></LI></OL><H1>Problem Example</H1><P>The following code produces a data analysis based on a financial index. Because it does not HTML encode the echoed input, the application is vulnerable to reflective cross-site scripting.</P><BLOCKQUOTE><PRE>import java.io.&#42;;<BR>import java.util.&#42;;<BR>import java.lang.&#42;;<BR>import javax.servlet.&#42;;<BR>import javax.servlet.http.&#42;;<BR>import java.util.regex.&#42;;<BR> public final class DataAggregator extends HttpServlet<BR>&#123;<BR>      public void doGet<BR>             (<BR>            HttpServletRequest request,<BR>             HttpServletResponse response<BR>            )<BR>            throws ServletException, IOException<BR>      &#123;<BR>            PrintWriter out = response.getWriter();<BR>            String searchTerm = request.getParameter("index");<BR>             try<BR>            &#123;<BR>                  if (validateSearchTerm(searchTerm))<BR>                  &#123;<BR>                        String retString;<BR>                         retString = "The queried index \"";<BR>                         // The application does not HTML encode<BR>                         //     the returned input<BR>                        retString &#43;= searchTerm;<BR>                         retString &#43;= "\" results in:&lt;br&gt; ";<BR>                        out.println(retString);<BR>                        common.aggregateData(out, searchTerm);<BR>                  &#125;<BR>                  else<BR>                  &#123;<BR>                        // Add appropriate logging and exception handling<BR>                         // mechanisms. Consult the Exception Handling and<BR>                         // Logging sections<BR>                         out.println("Unable to process at the moment."<BR>                                 &#43; " Please try again later.");<BR>                  &#125;<BR>            &#125;<BR>             catch (Exception e)<BR>            &#123;<BR>                  // Add the appropriate logging and exception handling<BR>                   // mechanisms. Consult the Exception Handling<BR>                   // and Logging sections<BR>                   out.println("Unable to process at the moment."<BR>                           &#43; " Please try again later.");<BR>            &#125;<BR>             out.flush();<BR>            out.close();<BR>      &#125;<BR>&#125;</PRE></BLOCKQUOTE><H1>Solution Example</H1><P>The following code produces a data analysis based on a financial index. Because the code HTML encodes the echoed input, it is impossible for an attacker to exploit the application via reflective cross-site scripting.</P><BLOCKQUOTE><PRE>import java.io.&#42;;<BR>import java.util.&#42;;<BR>import java.lang.&#42;;<BR>import javax.servlet.&#42;;<BR>import javax.servlet.http.&#42;;<BR>import java.util.regex.&#42;;<BR> public final class DataAggregator extends HttpServlet<BR>&#123;<BR>      public void doGet<BR>      (<BR>        HttpServletRequest request,<BR>         HttpServletResponse response<BR>      )<BR>            throws ServletException, IOException<BR>      &#123;<BR>            PrintWriter out = response.getWriter();<BR>            String searchTerm = request.getParameter("index");<BR>             try<BR>            &#123;<BR>                  if (validateSearchTerm(searchTerm))<BR>                  &#123;<BR>                        String retString;<BR>                         retString = "The queried index \"";<BR>                         // The application HTML encodes the echoed input<BR>                        retString &#43;= encodeHtml(searchTerm);<BR>                         retString &#43;= "\" results in :&lt;br&gt; ";<BR>                        out.println(retString);<BR>                        common.aggregateData(out, searchTerm);<BR>                  &#125;<BR>                  else<BR>                  &#123;<BR>                        // Add the appropriate logging and exception<BR>                         // handling mechanisms. Consult the Exception<BR>                         // Handling and Logging sections<BR>                         out.println("Unable to process at the moment."<BR>                                 &#43; " Please try again later.");<BR>                  &#125;<BR>            &#125;<BR>            catch (Exception e)<BR>            &#123;<BR>                  // Add the appropriate logging and exception<BR>                   // handling mechanisms. Consult the Exception<BR>                   // Handling and Logging sections<BR>                   out.println("Unable to process at the moment."<BR>                           &#43; " Please try again later.");<BR>            &#125;             out.flush();<BR>            out.close();<BR>      &#125;<BR>       public String encodeHtml(String input)<BR>      &#123;<BR>            StringBuffer out = new StringBuffer();<BR>             for (int i = 0; i &lt; input.length(); i&#43;&#43;)<BR>            &#123;<BR>                  char c = input.charAt(i);<BR>                  if (c == '&lt;')<BR>                  &#123;<BR>                        out.append("&amp;lt;");<BR>                  &#125;<BR>                  else if (c == '&gt;')<BR>                  &#123;<BR>                        out.append("&amp;gt;");<BR>                  &#125;<BR>                  else if (c == '\"')<BR>                  &#123;<BR>                        out.append("&amp;quot;");<BR>                  &#125;<BR>                  else if (c == '\'')<BR>                  &#123;<BR>                        out.append("&amp;quot;");<BR>                  &#125;<BR>                  else if (c == '&amp;')<BR>                  &#123;<BR>                        out.append("&amp;amp;");<BR>                  &#125;<BR>                  else if (c &gt; 0x20 &amp;&amp; c &lt; 0x126)<BR>                  &#123;<BR>                        out.append(c);<BR>                  &#125;<BR>                  else<BR>                  &#123;<BR>                        out.append("&amp;#" &#43; (int)c &#43; ";");<BR>                  &#125;<BR>            &#125;<BR>             return out.toString();<BR>      &#125;<BR>&#125;</PRE></BLOCKQUOTE><H1>Additional Resources</H1><UL><LI>To learn more about preventing cross-site scripting, see: <A href="http://support.microsoft.com/kb/252985">How to prevent cross-site scripting security issues</A>.</LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:BC10DCE2-CA48-44BF-8BF6-FEFBE8DCCB7E">Attack: Cross Site Scripting Attack</A> <LI><A href="ruledisplay:2B17E816-C6C4-4B05-BE92-01DC71073F66">Attack: Response Splitting Attack</A> <LI><A href="ruledisplay:198CBDAF-3F87-4291-870D-8B6F077D8D36">Attack: AJAX Injection Attack</A> <LI><A href="ruledisplay:D4DBB48C-D394-4632-B72F-148BCD87E9D9">Checklist Item: All Output Data is Encoded (Java Web Application)</A> </LI></UL>
]]></content></guidanceItem>