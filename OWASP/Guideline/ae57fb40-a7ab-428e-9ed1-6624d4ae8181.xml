<?xml version="1.0" encoding="utf-8"?><guidanceItem id="ae57fb40-a7ab-428e-9ed1-6624d4ae8181" type="guideline" title="Validate Input from All Sources" cssFile="guidance.css" Date="2010-12-30T00:53:50.546875Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\Guideline\ae57fb40-a7ab-428e-9ed1-6624d4ae8181.xml" Priority="1" Rule_Type="Design" Source="SI" Status="" Technology="Java" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>Applies to</H1><UL><LI>Applications written using Servlets or JSP.</LI></UL><H1>What to Do</H1><P>Treat input from all external sources as untrusted and apply input validation techniques.</P><H1>Why</H1><P>Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities&nbsp;that could allow an attacker to gain unauthorized access to sensitive data.</P><H1>When</H1><P>Treat all input as untrusted. If you have established trust boundaries for your application, then validate data every time it crosses a trust boundary.</P><H1>How</H1><P>An application can take input via various ways: web interface, database, file system, other software running on the server, etc. Use the following steps to establish a validation strategy:</P><OL><LI><P><STRONG>Establish your application's trust boundary:</STRONG> The notion is that all input not generated by your application is untrusted.</P></LI><LI><P><STRONG>Identify all sources of input</STRONG>: An application can have various sources of input and each one is an entry point to your application&nbsp;that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input&nbsp;at&nbsp;each source. Potential sources of input in a web application typically include:</P></LI><OL><LI>URL based parameters <LI>Form based parameters <LI>Hidden fields <LI>Cookies <LI>HTTP headers <LI>Local filesystem <LI>Database <LI>Other related services</LI></OL><LI><P><STRONG>Understand the input that your application can handle and process</STRONG>: After identifying the different entry points, define the format and type of input that&nbsp;should be provided through each entry point. </P></LI><LI><P><STRONG>Create a set of validators</STRONG>: Build a validator for each format and type of expected input. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators. <P>See the <A href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559">Validate Input for Length, Range, Format, and Type</A> guideline for more information on constructing validation routines.</P></LI></OL><H1>Problem Example</H1><P>The following code produces a data analysis based on a financial index. Unfortunately, the application validates the user's input but not the returned data from the database. Therefore, the application is vulnerable to an integer overflow that can harm the business logic used in generating the data analysis.</P><BLOCKQUOTE><PRE>import java.io.&#42;;<BR>import java.util.&#42;;<BR>import java.lang.&#42;;<BR>import javax.servlet.&#42;;<BR>import javax.servlet.http.&#42;;<BR>import java.util.regex.&#42;;<BR> public final class DataAggregator extends HttpServlet<BR>&#123;      public void doGet(HttpServletRequest request, HttpServletResponse response)<BR>            throws ServletException, IOException<BR>      &#123;            PrintWriter out = response.getWriter();<BR>            String searchTerm = request.getParameter("index");<BR>             try<BR>            &#123;<BR>                  // The application validates the user-supplied input<BR>                  if (validateSearchTerm(searchTerm))<BR>                  &#123;<BR>                        String retString;<BR>                         retString = "The queried index \"";<BR>                        retString &#43;= encodeHtml(searchTerm);<BR>                        retString &#43;= "\" produced the following results:&lt;br&gt; ";<BR>                        out.println(retString);<BR>                        aggregateData(out, searchTerm);<BR>                  &#125;<BR>                  else<BR>                  &#123;<BR>                        // Add the appropriate logging and exception handling<BR>                        // mechanisms. Consult the Exception Handling and<BR>                         // Logging sections<BR>                         out.println("We cannot handle your request at the moment."<BR>                                 &#43; " Please try again later.");<BR>                  &#125;<BR>            &#125;<BR>             catch (Exception e)<BR>            &#123;<BR>                  // Add the appropriate logging and exception handling<BR>                   // mechanisms. Consult the Exception Handling and<BR>                   // Logging sections <BR>                  out.println("We cannot handle your request at the moment."<BR>                           &#43; " Please try again later.");<BR>            &#125;<BR>             out.flush();<BR>            out.close();<BR>      &#125;<BR>       boolean validateSearchTerm(String input)<BR>      &#123;<BR>            String goodPattern = "(\\w&#124;\\d)&#43;";<BR>            int goodLength = 8;<BR>             if (input == null)<BR>            &#123;<BR>                  return false;<BR>            &#125;<BR>             if(input.length() &gt; goodLength)<BR>            &#123;<BR>                  return false;<BR>            &#125;<BR>                        Pattern p = Pattern.compile(goodPattern);<BR>            Matcher m = p.matcher(input);<BR>                        if(&#33;m.matches())<BR>            &#123;<BR>                  return false;<BR>            &#125;<BR>                        return true;<BR>      &#125;<BR>       void aggregateData(PrintWriter out, String searchTerm)<BR>      &#123;<BR>            double&#91;&#93; rData = common.queryDBForIndex(searchTerm);<BR>             // The application fails to validate the returned<BR>             // data from the database<BR>             // Business logic that performs certain data analysis<BR>      &#125;<BR>&#125;</PRE></BLOCKQUOTE><H1>Solution Example</H1><P>The following code produces a data analysis based on a financial index. Since the code validates all sources of input to the application, the application is secured from SQL injection and integer overflows. Notice that this example code is also related to <A href="ruledisplay:c98695c5-cf02-44a1-96bf-1f8046b8ad9d">Validate Input for Length, Range, Format, and Type</A>.</P><BLOCKQUOTE><PRE>import java.io.&#42;;<BR>import java.util.&#42;;<BR>import java.lang.&#42;;<BR>import javax.servlet.&#42;;<BR>import javax.servlet.http.&#42;;<BR>import java.util.regex.&#42;;<BR> public final class DataAggregator extends HttpServlet<BR>&#123;      public void doGet(HttpServletRequest request, HttpServletResponse response)<BR>            throws ServletException, IOException<BR>      &#123;<BR>            PrintWriter out = response.getWriter();<BR>            String searchTerm = request.getParameter("index");<BR>             try<BR>            &#123;<BR>                  // The application validates the user-supplied input<BR>                  if (validateSearchTerm(searchTerm))<BR>                  &#123;<BR>                        String retString;<BR>                         retString = "The queried index \"";<BR>                        retString &#43;= encodeHtml(searchTerm);<BR>                        retString &#43;= "\" produced the following results:&lt;br&gt; ";<BR>                        out.println(retString);<BR>                        aggregateData(out, searchTerm);<BR>                  &#125;<BR>                  else<BR>                  &#123;<BR>                        // Add the appropriate logging and exception<BR>                        // handling mechanisms. Consult the Exception Handling<BR>                        // and Logging sections <BR>                        out.println("We cannot handle your request at the moment."<BR>                                 &#43; " Please try again later.");<BR>                  &#125;<BR>            &#125;<BR>             catch (Exception e)<BR>            &#123;<BR>                  // Add the appropriate logging and exception handling mechanisms<BR>                  // Consult the Exception Handling and Logging sections<BR>                   out.println("We cannot handle your request at the moment."<BR>                           &#43; " Please try again later.");<BR>            &#125;<BR>             out.flush();<BR>            out.close();<BR>      &#125;<BR>       void aggregateData(PrintWriter out, String searchTerm) throws Exception<BR>      &#123;<BR>            double&#91;&#93; rData = common.queryDBForIndex(searchTerm);<BR>             // The application validates the returned data from the database<BR>            if (validateRawDBData(rData))<BR>            &#123;<BR>                  // Business logic that performs certain data analysis<BR>            &#125;<BR>            else<BR>            &#123;<BR>                  String errMsg = "Business logic not executed";<BR>                  throw new Exception(errMsg);<BR>            &#125;<BR>      &#125;<BR>       boolean validateSearchTerm(String input)<BR>      &#123;<BR>            String goodPattern = "(\\w&#124;\\d)&#43;";<BR>            int goodLength = 8;<BR>             if (input == null)<BR>            &#123;<BR>                  return false;<BR>            &#125;<BR>             if(input.length() &gt; goodLength)<BR>            &#123;<BR>                  return false;<BR>            &#125;<BR>                        Pattern p = Pattern.compile(goodPattern);<BR>            Matcher m = p.matcher(input);<BR>                        if(&#33;m.matches())<BR>            &#123;<BR>                  return false;<BR>            &#125;<BR>                        return true;<BR>      &#125;<BR>       boolean validateRawDBData(double&#91;&#93; input)<BR>      &#123;<BR>            boolean valid = true;<BR>             for (int i = 0; i &lt; input.length; i&#43;&#43;)<BR>            &#123;<BR>                  if (input&#91;i&#93; &lt; 0.0 &#124;&#124; input&#91;i&#93; &gt; 100.0)<BR>                  &#123;<BR>                        valid = false;<BR>                  &#125;<BR>            &#125;<BR>             return valid;<BR>      &#125;<BR>&#125;</PRE></BLOCKQUOTE><H1>Related Items</H1><UL><LI><A href="ruledisplay:DA8CCFC9-F04F-4913-B05E-F574D3E4A559">Guideline: Validate Input for Length, Range, Format, and Type (Java Web Application)</A> <LI><A href="ruledisplay:BEC58471-A0EF-40C5-8C9D-9BF5C4B91F1F">Guideline: Filter All User-Supplied Filename and Path Input (Java Web Application)</A> <LI><A href="ruledisplay:2D8158D1-E2D1-459F-9BD7-56D4B979EFE3">Guideline: Encode All Output Data (Java Web Application)</A> <LI><A href="ruledisplay:D6593992-DC9E-42C5-9E98-30E8EF075B93">Guideline: Do Not Rely on Client-Side Validation (Java Web Application)</A> <LI><A href="ruledisplay:81491E66-67B7-49F3-BDA6-4B4C9245C702">Guideline: Validate All Input Passed to Database (Java Web Application)</A> <LI><A href="ruledisplay:D8D7FC19-F935-4FA1-BB66-8D4B8A185CDB">Guideline: Validate User's Login Credentials Before Processing Them (Java Web Application)</A> <LI><A href="ruledisplay:42F599F0-D1D6-4F25-9CC2-D5473F19113F">Guideline: Validate All Data Passed Between Native and Java Code (Java Web Application)</A> <LI><A href="ruledisplay:178EB28D-4F49-4476-AE8A-437F966DE577">Checklist Item: Input from All Sources is Validated (Java Web Application)</A> </LI></UL>
]]></content></guidanceItem>