<?xml version="1.0" encoding="utf-8"?><guidanceItem id="47e03443-3e6b-4187-ad9a-843ad1ecdf5d" type="guideline" title="Use SSL Between Untrusted Server Applications" cssFile="guidance.css" Date="2010-10-03T05:50:45.25Z" Author="" Category="Communication Security" filePath="..\Libraries\OWASP\Guideline\47e03443-3e6b-4187-ad9a-843ad1ecdf5d.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Guideline" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Do</H1><P>Use an encrypted communication channel to protect data sent between servers.&nbsp;The Secure Sockets Layer (SSL) protocol can be used to secure the communication link between&nbsp;servers.&nbsp;&nbsp; </P><H1>Why</H1><P>Servers rarely co-exist in a secure environment.&nbsp;Eavesdropping and spoofing are threats when two or more entities must communicate over an untrusted medium such as the public internet, or even&nbsp;a LAN. Using SSL&nbsp;prevents&nbsp;attackers from&nbsp;monitoring the network connection to obtain authentication credentials in plain text. Not using SSL could allow an attacker&nbsp;to capture the authentication cookies&nbsp;and gain spoofed access to&nbsp;any applications that transmit data over the network.</P><H1>When</H1><P>If&nbsp;communicating&nbsp;servers are not inside a physically secure data center where the network eavesdropping threat is negligible,&nbsp;it&nbsp;is important to use an encrypted communication channel to protect data sent between servers. SSL is used when an application does not trust other applications on a server. Use SSL when granular channel protection for a particular application running on a server is needed&nbsp;rather than&nbsp;for all applications and services. It is also an appropriate choice when fixed ip addresses are not available. SSL only works with TCP/IP communication&nbsp;protocol as well as named pipes.</P><P>Use IPSec to help protect the communication channel between two servers and to restrict which computers can communicate with one another. For example, you can help protect a database server by establishing a policy that permits requests only from a trusted client computer such as an application or Web server. You can also restrict communication to specific IP protocols and TCP/UDP ports.</P><H1>How</H1><P>Here is how to use SSL&nbsp;to&nbsp;protect communication between servers:</P><OL><LI><P>Install a Server Authentication Certificate on the server. </P><LI><P>Install the Issuing CA's certificate&nbsp;so the&nbsp;two communicating applications may negotiate an SSL connection.&nbsp;</P><LI><P>Use the "https://" connection protocol in the code to ensure traffic between the 2 server applications are encrypted.</P><LI><P>Verify that Communication Is Encrypted. Use Network Monitor to verify that data sent between the application server and database server is encrypted. Start by sending data in clear text form and then enable encryption first by configuring the server and then by configuring the client.</P></LI></OL><H1>Problem Example</H1><P>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component&nbsp;relies on an independant&nbsp;account management system that resides on another server. The web&nbsp;component communicates with the account management system using a SQL&nbsp;socket connection.&nbsp; The two servers&nbsp;are located in a competitively priced data center that houses a number of other customers, all of which are able&nbsp;to access the building&nbsp;at all times. A malicious user&nbsp;purchases hosting services at the same company, and&nbsp;after exploring the hosting environment, learns that the hosted accounts are networked using a shared&nbsp;bus topology&nbsp;that allows for network snooping. The attacker is able to setup a sniffer, and captures all of the communication between the account management component and the web component, since SQL connections are not encrypted by default. The attacker can now log in as a legitimate user&nbsp;on the account management server and make changes at will.&nbsp;&nbsp;</P><H1>Solution Example</H1><P>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component&nbsp;relies on an independant&nbsp;account management system that resides on another server. The web&nbsp;component communicates with the account management system using a SQL&nbsp;socket connection. The two servers&nbsp;are located in a competitively priced data center that houses a number of other customers, all of which are able&nbsp;to access the building&nbsp;at all times. The Developer of the application setup encrypted SSL traffic by installing a Server Authenticaion Certificate on the machine hosting the account management component, and installed the issuing CA's certificate on the&nbsp;server hosting the web component. &nbsp;The components use OLE-DB to communicate, so the developer inserted the following configuration directives in the web.config file:</P><PRE>"Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security <BR>&nbsp; Info=False;Initial Catalog=Northwind;Data Source=sql01;Use <BR>&nbsp; Encryption for Data=True"</PRE><P>The developer then uses the following call to connect to the database using the SSL tunnel for data encryption:</P><PRE>// Replace the server name in the following connection string with the name of your database <BR>serverSqlConnection conn = new SqlConnection("server='sql01';<BR>&#9;database=NorthWind;IntegratedSecurity='SSPI'");</PRE><P>Because&nbsp;traffic between the two components is encrypted, the transmission medium&nbsp;is&nbsp;less&nbsp;likely to affect the ability of the two components to communicate securely.</P><H1>Additional Resources</H1><UL><LI>Using Secure Sockets Layer <A href="http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx">http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx</A> <LI>Internet Protocol Version 6 <A href="http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx">http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx</A>&nbsp; <LI>Wikipedia SSL encyclopedia entry <A href="http://en.wikipedia.org/wiki/Secure_Sockets_Layer">http://en.wikipedia.org/wiki/Secure_Sockets_Layer</A> </LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:ecfc4c67-2a6c-443e-844e-8a3051fe54f3">Use IPSsec to Encrypt Traffic Between Servers</A> <LI><A href="ruledisplay:8afce3ed-b29f-4a25-ab8c-0d070383c7ad">Use SSL Between Untrusted Server Applications</A> <LI><A href="ruledisplay:00b37bcb-5a47-41ca-9e84-a9e8edb15272">Use SSL Between the Web Browser and Web Server When Pages Need to be Encrypted</A> <LI><A href="ruledisplay:de1299b9-854b-4479-9f26-bbc9df38af29">Use SSL or IPSec for Secure Communication Between Entities</A></LI></UL><HR><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>