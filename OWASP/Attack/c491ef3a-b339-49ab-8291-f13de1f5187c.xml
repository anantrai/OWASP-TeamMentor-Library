<?xml version="1.0" encoding="utf-8"?><guidanceItem id="c491ef3a-b339-49ab-8291-f13de1f5187c" type="Attack" title="Cross Site Request Forgery Attack" cssFile="guidance.css" Date="2010-06-24T20:21:44.023Z" Author="" Category="Application State" filePath="..\Libraries\OWASP\Attack\c491ef3a-b339-49ab-8291-f13de1f5187c.xml" Priority="1" Rule_Type="Implementation" Source="SI" Status="" Technology=" Any" Topic="Security" Type="Attack" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<BR><BR><H1>Applies To</H1><P>All web applications.</P><H1>Description</H1><P>A Cross Site Request Forgery attack occurs when an attacker tricks a victim into loading a page that contains a malicious request. This request may be able to change the state of the web application and is possible because the request is sent in the context of the logged in victim. For many sites each request automatically sends the victim's credentials such as the session cookie or authentication credentials. Due to this fact there is no way to distinguish the false request from a legitimate request.</P><P>Cross Site Request Forgery attacks are known by other names including XSRF, Session Riding, One-Click and Zero-Click attacks. </P><P>A One-Click attack refers to a link that causes a malicious action to be performed when a victim clicks on it. A Zero-Click attack is automatically executed upon page load. A common way to perform a zero-click attack is to embed the request in the source of an image.</P><H1>Impact</H1><P><STRONG>Elevation of privilege</STRONG> - the attacker can execute commands on the web application on behalf of the victim</P><H1>Vulnerabilities</H1><P>Executing single requests that can change the state of the application, such as add users, change account balances or passwords, etc.</P><H1>Countermeasures</H1><UL><LI>Add a session identifier or nonce value to each session and/or viewstate to track each request. <LI>Use "double submit" cookies (for Ajax requests only). <LI>Minimize single request GET commands. <LI>Never allow a single request to change the state of the web application.</LI></UL><H1>Example</H1><P>If the application allows a user to change the state of the application in a single request this attack is possible. In this example the web application allows a logged in administrator to create a new user sending a single GET request.</P><P>This GET request looks like this:</P><PRE>GET http://teammentorexample.com/adduser.aspx?username=joe&amp;password=1234&amp;usertype=userHTTP/1.1</PRE><P>The attacker discovers that this request will create a new user and creates his own request which he embeds in an e-mail with the following image tag:</P><PRE>&lt;img src="http://teammentorexample.com/adduser.aspx?username=HACKER&amp;password=TEST&amp;usertype=admin" /&gt;</PRE><P>When the victim's e-mail client attempts to download the image located at the above source the request is made without the knowledge of the victim. </P><P>The application should require a two step authorization mechanism for any change to server state. In this example the server should send the client a nonce value to verify the admin would indeed like to add this user. The admin would have to verify the action on a separate page and return the nonce value. Only after the server receives the action and verifies the nonce should the user be created. </P><H1>Additional Resources</H1><P>To learn more about CSRF attacks, see:</P><UL><LI><A href="http://www.owasp.org/index.php/Cross-Site_Request_Forgery">http://www.owasp.org/index.php/Cross-Site_Request_Forgery</A> <LI><A href="http://www.cgisecurity.com/articles/csrf-faq.shtml">http://www.cgisecurity.com/articles/csrf-faq.shtml</A> <LI><A href="http://www.owasp.org/index.php/Testing_for_CSRF">http://www.owasp.org/index.php/Testing_for_CSRF</A></LI></UL><H1>Related Items</H1><UL><LI><A href="ruledisplay:9E3FC30A-B55C-4AF6-8B77-A534C6F87197">Attack: Phishing Attack</A> <LI><A href="ruledisplay:BC10DCE2-CA48-44BF-8BF6-FEFBE8DCCB7E">Attack: Cross Site Scripting Attack</A> <LI><A href="ruledisplay:5582C496-8E58-4EF8-86EA-D0E565197525">Attack: Reflection Attack</A> <LI><A href="ruledisplay:5B0B4683-2F43-4F71-8DF4-121013673B4C">Attack: URL Redirection Attack</A> <LI><A href="ruledisplay:198CBDAF-3F87-4291-870D-8B6F077D8D36">Attack: AJAX Injection Attack</A> <LI><A href="ruledisplay:3EB8979E-59F0-4C2B-8D8A-CFB173E5D66B">Attack: HTTP Session Hijacking Attack</A> <LI><A href="ruledisplay:48BB4D3A-9295-4263-B3E7-090E483DEC5D">Attack: Man in the Middle Attack</A> <LI><A href="ruledisplay:ECAF57F9-0C13-4FC2-B298-811A706BED8F">Guideline: Do Not Place Sensitive Data in Parameters </A><LI><A href="ruledisplay:04A281E9-1078-48B4-ABBC-74CB259F8C92">Guideline: Use Page.ViewStateUserKey to Counter Cross Site Request Forgery Attacks </A><LI><A href="ruledisplay:BB960347-F2E9-4926-8B75-ECCEE36D3EE8">Guideline: Protect Session Cookies </A></LI></UL>
]]></content></guidanceItem>