<?xml version="1.0" encoding="utf-8"?><guidanceItem id="56b0552d-2ceb-4714-a8f1-20a6a8609874" type="checklist" title="All Database Input is Validated" cssFile="guidance.css" Date="2010-10-03T03:12:59.78125Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\Checklist Item\56b0552d-2ceb-4714-a8f1-20a6a8609874.xml" Priority="2" Rule_Type="Implementation" Source="SI" status="" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Ensure all input is validated before it is passed to the database.</P><H1>Why</H1><P>Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities&nbsp;that could allow an attacker to gain unauthorized access to sensitive data.</P><H1>How to Check</H1><P>Follow these steps to ensure that all input passed to database is validated:</P><OL><LI><P><STRONG>Identify all sources of input to the database. </STRONG>An application can have various sources of input. Each of these sources is an entry point to your application and can potentially be used to break your application's security model. Determine all sources of input&nbsp;that&nbsp;are eventually pushed to the database.</P><P>Potential sources of input in a web application typically include:</P><UL><LI>URL based parameters <LI>Form based parameters <LI>Hidden fields <LI>Cookies <LI>HTTP headers <LI>Data stored on the local filesystem <LI>Database <LI>Other related services</LI></UL><LI><P><STRONG>Verify that validators have been used to check the input. </STRONG>Check that a content-specific validator has been placed at each entry point.<BR>Each database input source should have a data validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing. If a database input source does not have a validation routine associated with it, flag it for fixing.</P></LI><LI><P><STRONG>Ensure that type-safe parameters and stored procedures are used. </STRONG>Check that stored procedures and parametrized queries have been implemented instead of using the input values directly in constructing dynamic SQL queries as the latter is prone to SQL injection. </P><LI><P><STRONG>Ensure that database entry paths have been audited. </STRONG>Get a 3rd party reviewer to verify that all the database input paths have been identified and that validators have been correctly implemented for all entry points.</P></LI></OL><H1>Problem Example</H1><P>The following code validates the user based on a given username and password. It hashes the password with a random salt. Then it compares the username and the produced hash against the data stored in the backend database.</P><P>Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.</P><P><PRE>public boolean validateUser(String user, char&#91;&#93; pass)<BR>&#123;<BR>      byte&#91;&#93; salt = MyApp.generateSalt();<BR>      String passHash;<BR>      SqlConnection cn;<BR>      SqlCommand sqlCommand;<BR>      String query;<BR>      passHash = hashCredentials(pass, salt);<BR>      // The application crafts the SQL query based on user's input<BR>      cn = MyApp.getDBConnection();<BR>      sqlCommand = new SqlCommand("select user from myappUsers where user = \"" &#43; user &#43; "\"<BR>                                     &#43; and pass = \"" &#43; passHash &#43; "\" and login_attempts &lt; 3;", cn);<BR>      SqlDataReader reader = sqlCommand.ExecuteReader();<BR>      updateLastLoginAttempt(user);<BR>      ...<BR>&#125;</PRE><P>If a user submits a login request with a username of 'foo\" or 1 = 1; drop table &#42;; --', the system will happily first authenticate the user and then drop all the tables in the database.</P><H1>Related Guideline</H1><UL><LI><A href="ruledisplay:F1B74837-9A72-4745-A149-EC5D8C476EB7">Guideline: Validate All Input Passed to Database (ASP.NET)</A> </LI></UL><HR><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>