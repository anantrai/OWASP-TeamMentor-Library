<?xml version="1.0" encoding="utf-8"?><guidanceItem id="25e29df6-d0ec-42b7-982d-b97331e549a9" type="checklist" title="Type Safe SQL Parameters are Used" cssFile="guidance.css" Date="2010-10-03T04:36:28.890625Z" Author="" Category="Data Access" filePath="..\Libraries\OWASP\Checklist Item\25e29df6-d0ec-42b7-982d-b97331e549a9.xml" Priority="1" Rule_Type="Implementation" Source="SI" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Ensure that type-safe parameters are used when constructing dynamic SQL queries or when passing parameters to stored procedures.</P><H1>Why</H1><P>If you use the Parameters collection, SQL treats the input is as a literal value rather then as executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception.</P><P>If type-safe SQL parameters are not used, attackers might be able to execute injection attacks that are embedded in the unfiltered input.</P><H1>How to Check</H1><P>To check if parameterized queries are used:</P><OL><LI><P><STRONG>Identify all database transactions. </STRONG>Locate all SQL queries throughout your application. Example:</P><PRE>"select user from myappUsers where user = ? and pass = ?;"</PRE><LI><P><STRONG>Verify that each transaction uses Stored Procedures where possible. </STRONG>Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:</P><PRE>SqlCommand myCommand = new SqlCommand("sp_SelectUser", myConnection);<BR>//Specify our command is a stored procedure<BR>myCommand.CommandType = CommandType.StoredProcedure; </PRE><P>and not like:</P><PRE>string SQLstr = "SELECT &#42; from users<BR>&#9; WHERE username = '" &#43; un.Text &#43; "'<BR>&#9; AND password = '" &#43; pass.Text &#43; "'";<BR>SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);</PRE><LI><P><STRONG>Verify that type-safe parameters are used. </STRONG>Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:</P><PRE>using (SqlConnection connection = new SqlConnection(connectionString))<BR>&#123;<BR>  connection.Open();<BR>  SqlDataAdapter myDataAdapter = new SqlDataAdapter(<BR>         "SELECT &#42; from users WHERE username = '&#64;uname' AND password = '&#64;pwd'", connection);<BR>  myCommand.SelectCommand.Parameters.Add("&#64;uname", SqlDbType.VarChar, 24);<BR>  myCommand.SelectCommand.Parameters.Add("&#64;pwd", SqlDbType.VarChar, 16);<BR>  myCommand.SelectCommand.Parameters&#91;"&#64;uname"&#93;.Value = un.Text;<BR>  myCommand.SelectCommand.Parameters&#91;"&#64;pwd"&#93;.Value = pass.Text;<BR>  myDataAdapter.Fill(userDataset);  ...  connection.Close();<BR>&#125;</PRE></LI></OL><H1>Problem Example</H1><P>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application created an SQL SELECT query to accomplish said task:</P><PRE>using (SqlConnection myConnection = new SqlConnection(connectionString))<BR>&#123;<BR>  connection.Open();<BR>  string SQLstr = "SELECT &#42; from users WHERE username = '" &#43; un.Text &#43; "'<BR>&#9; AND password = '" &#43; pass.Text &#43; "'";<BR>  SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);<BR>  SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);<BR>  myCommand.Connection.Open();<BR>  SqlDataReader myReader = myCommand.ExecuteReader();<BR>  ...<BR>&#125;</PRE><P>In the preceding example, the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:</P><PRE>mjones' AND 1=1; -- </PRE><P>This will result in the SQL statement being executed at the database level:</P><PRE>SELECT &#42; from users WHERE username = 'mjones' AND 1=1; --'  AND password = '1234';</PRE><P>This will allow the person entering data into the dialog box to select the account details of mjones without the correct password.</P><H1>Additional Resources</H1><UL><LI>To learn more about SQL injection, see: <A href="http://en.wikipedia.org/wiki/SQL_injection">SQL Injection</A> in Wikipedia. <LI>To learn more about countering SQL injection in ASP.NET, visit: <A href="http://msdn2.microsoft.com/en-us/library/ms998271.aspx">How To: Protect From SQL Injection in ASP.NET</A>. <LI>To learn more about countering injection-based attacks in ASP.NET, see: <A href="http://msdn2.microsoft.com/en-us/library/bb355989.aspx">How To: Protect From Injection Attacks in ASP.NET</A>.</LI></UL><H1>Related Guideline</H1><UL><LI><A href="ruledisplay:3437DF81-6B8C-4A14-BB6E-34F6EE21C45F">Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries</A> </LI></UL><HR><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>