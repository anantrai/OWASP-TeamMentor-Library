<?xml version="1.0" encoding="utf-8"?><guidanceItem id="bf418d65-90af-47f9-a868-5ca605aff024" type="checklist" title="Dynamic Queries that Accept User Input are used only if Stored Procedures Cannot be used" cssFile="guidance.css" Date="2010-10-03T03:02:09.203125Z" Author="" Category="Data Access" filePath="..\Libraries\OWASP\Checklist Item\bf418d65-90af-47f9-a868-5ca605aff024.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Check to ensure that your application avoids constructing SQL queries in code that include user input. Make sure that it uses parameterized stored procedures that use type safe SQL parameters. </P><H1>Why</H1><P>If you construct queries dynamically using user input, your code is susceptible to SQL injection. </P><P></P><H1>How to Fix</H1><P>For example, avoid the following style of code.</P><P><PRE>// Use dynamic SQLSqlDataAdapter<BR> myCommand = new SqlDataAdapter(<BR>         "SELECT au_lname, au_fname FROM authors WHERE au_id = '" &#43;<BR>          SSN.Text &#43; "'", myConnection);  </PRE></P><P>If a malicious user supplies "' ; DROP DATABASE pubs --'" for the SSN.Text field, the code inserts the user's malicious input and generates the following query:</P><P><PRE>SELECT au_lname, au_fname FROM authors WHERE au_id = ''; DROP DATABASE pubs --'  </PRE></P><P>The ; (semicolon) character tells SQL that this is the end of the current statement, which is then followed by the malicious SQL code, which in this example drops the authors table.</P><HR><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>