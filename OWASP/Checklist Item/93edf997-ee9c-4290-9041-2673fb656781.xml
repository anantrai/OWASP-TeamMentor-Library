<?xml version="1.0" encoding="utf-8"?><guidanceItem id="93edf997-ee9c-4290-9041-2673fb656781" type="checklist" title="Free Form Input is Sanitized to Protect Against Malicious Data" cssFile="guidance.css" Date="2010-09-29T18:55:30.21875Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\Checklist Item\93edf997-ee9c-4290-9041-2673fb656781.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Ensure that your application validates all forms of input&nbsp;and cleans malicious data either by&nbsp;rejecting or sanitizing it.</P><H1>How to Fix</H1><P>Do not trust input. An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities. Check for known good data, and constrain input by validating it for type, length, format, and range.</P><P>For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the <B>RegularExpressionValidator</B>, <B>RangeValidator</B>, and <B>CustomValidator</B>, to validate and constrain input. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the <B>Regex</B> class, and you can validate numeric ranges by converting the input value to an integer or double and then performing a range check.</P><HR><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>