<?xml version="1.0" encoding="utf-8"?><guidanceItem id="6d0a0563-19e5-4a12-9e97-9c906abb3971" type="checklist" title="Application is Partitioned into Public and Private Domains" cssFile="guidance.css" Date="2010-10-03T03:25:58.234375Z" Author="" Category="Authentication" filePath="..\Libraries\OWASP\Checklist Item\6d0a0563-19e5-4a12-9e97-9c906abb3971.xml" Priority="2" Rule_Type="Deployment" Source="SI" status="" Status="" Technology="ASP.NET 3.5" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Ensure that there is a boundary defined to separate public and restricted content in both the URL namespace and file system namespace. </P><H1>Why</H1><P>Defining a boundary between public and restricted content simplifies the task of user authorization and is generally less prone to error. When the content is separated, server configuration can be used to automatically apply authorization rules without relying on the developer to explicitly add checks in the code.</P><H1>How to Check</H1><P>Take the following steps to ensure your application is partitioned into public and restricted domains:</P><OL><LI><P><STRONG>Enumerate all web accessible resources.</STRONG>&nbsp;Identify the protected resources from the public resources. Common protected resources include, but are not limited to:</P><UL><LI>Resources that require authentication <LI>Critical application resources <LI>Sensitive/confidential data</LI></UL><LI><P><STRONG>Check the structure of the URL namespace.</STRONG> Ensure that your application's URL namespace is structured properly according to the level of protection and security needs of each resource. Verify that transitions between URL namespaces is performed using absolute URLs. For more information, see <A href="http://msdn2.microsoft.com/en-us/library/ms178116(vs.80).aspx">ASP.NET Web Site Paths</A> in MSDN.</P><LI><P><STRONG>Check if there is separation on disk between public and protected resources. </STRONG>Examine the local filesystem structure. Ensure that protected resources are not located inside a public directory and vice versa. </P><LI><P><STRONG>Ensure that protected resources have the appropriate access controls.</STRONG> Use the <A href="ruledisplay:AE79E2C4-186C-47E4-8D05-3C6ECAB2E1AF">Role-Based Security Checks are Performed</A> checklist to determine if all protected resources have the appropriate access controls assigned to them.</P><LI><P><STRONG>Verify the local system permissions for all resources.</STRONG> For each resource, check that the local filesystem permissions are set accordingly. If the resource is public, verify that anonymous users can access it. If the resource is protected, verify that only authorized users can access it.</P></LI></OL><H1>Problem Example</H1><P>MyApp is a financial tool that generates reports based on sensitive data. It allows the user to upload the financial data and download the report. Since the application is small, all of its content is located within the same directory. The access control is enforced by the web application through checking the required permissions before a given call is executed.</P><P>Since both data and code are within the same directory, it may be possible for an attacker to gain access to the raw financial data.</P><H1>Additional Resources</H1><UL><LI>To learn more about URL namespaces, see: <A href="http://msdn2.microsoft.com/en-us/library/ms178116(vs.80).aspx">ASP.NET Web Site Paths</A>. </LI></UL><H1>Related Guideline</H1><UL><LI><A href="ruledisplay:610BAA36-8A3C-404D-81D8-403ED054FEC4">Guideline: Partition Application Between Public and Private Domains (ASP.NET) (Forms Authentication)</A> </LI></UL><HR><P>Adapted from Microsoft patterns &amp; practices guidance. </P>
]]></content></guidanceItem>