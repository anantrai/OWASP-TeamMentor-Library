<?xml version="1.0" encoding="utf-8"?><guidanceItem id="26ca24fa-2c72-4482-80e3-7de6e8eb013d" type="checklist" title="Communication Links are Encrypted" cssFile="guidance.css" Date="2010-12-29T22:50:38.625Z" Author="" Category="Communication Security" filePath="..\Libraries\OWASP\Checklist Item\26ca24fa-2c72-4482-80e3-7de6e8eb013d.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="Java" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Ensure that the communication channels are encrypted when interacting with other software across the network.</P><H1>Why</H1><P>Encrypting the communication links allows the application to preserve confidentiality and integrity of the transmitted data.</P><H1>How to Check</H1><P>Use the following steps to ensure that your application's communication links are encrypted:</P><OL><LI><P><STRONG>Identify the connections used for transmitting sensitive data. </STRONG>Identify the sensitive data that is sent over the network and enumerate&nbsp;the respective connections that are used for such communication.</P><LI><P><STRONG>Verify that connections are secured. </STRONG>Using a network sniffer, verify that your application utilizes either IPSec or TLS/SSL then check the following:</P><UL><LI><P><STRONG>IPSec</STRONG>:&nbsp;If your application uses IPSec, verify that&nbsp;all packets from your sniffed traffic between the specified hosts contain an Authentication Header (AH) and Encapsulating Security Payload (ESP) fields after the IP headers.</P><LI><P><STRONG>TLS/SSL</STRONG>:&nbsp;If your application uses TLS/SSL, verify that&nbsp;your sniffed traffic between the specified hosts contains an SSL handshake. Keep in mind the following considerations when verifying your application's use of SSL:</P><UL><LI><P><STRONG>Certificate Validity</STRONG>: Verify that your application's SSL certificate has not reached its expiration date. </P><LI><P><STRONG>Certificate Version</STRONG>: Verify that your application uses SSL version 3.0 certificate.</P><LI><P><STRONG>Domain Name</STRONG>: Verify that the domain name for your application's administrative interface is the same as the domain name listed in the SSL certificate.</P><LI><P><STRONG>Chain of Trust</STRONG>: Verify that your application's users can verify your application's SSL certificate based on the root certificates that are stored in their browsers. If your application uses self-signed SSL certificates, ensure that your organization's root certificate is securely imported into the users' browsers.</P><LI><P><STRONG>Server Configuration</STRONG>: Verify that your application's environment has enabled HTTPS. Verify that transactions of sensitive nature are transmitted only over HTTPS connections. Check if your application's deployment descriptor (e.g. web.xml) has the <STRONG>transport-guarantee</STRONG> element set to <STRONG>CONFIDENTIAL</STRONG>:</P><BLOCKQUOTE><PRE>&lt;security-constraint&gt;<BR>  &lt;web-resource-collection&gt;<BR>    &lt;web-resource-name&gt;AcctManager&lt;/web-resource-name&gt;<BR>    &lt;url-pattern&gt;/acctmanager/&#42;&lt;/url-pattern&gt;<BR>    &lt;http-method&gt;GET&lt;/http-method&gt;<BR>    &lt;http-method&gt;POST&lt;/http-method&gt;<BR>  &lt;/web-resource-collection&gt;<BR>  &lt;user-data-constraint&gt;<BR>    &lt;transport-guarantee&gt;<STRONG>CONFIDENTIAL</STRONG>&lt;/transport-guarantee&gt;<BR>  &lt;/user-data-constraint&gt;<BR>  &lt;auth-constraint&gt;<BR>    &lt;role-name&gt;manager&lt;/role-name&gt;<BR>  &lt;/auth-constraint&gt;<BR>&lt;/security-constraint&gt;</PRE></BLOCKQUOTE></LI></UL></LI></UL></LI></OL><H1>Problem Example</H1><P>The following code establishes a connection between&nbsp;two servers. Unfortunately, the communication is not encrypted; therefore, it is possible for an attacker to eavesdrop on the connection.</P><P><BLOCKQUOTE><PRE>String remoteHost = "server02.example.com";<BR>int remotePort = "1337";<BR>Socket sock = new Socket(remoteHost, remotePort);<BR>InputStreamReader isr = new InputStreamReader(sock.getInputStream());<BR>BufferedReader input = new BufferedReader(isr);<BR>PrintWriter output = new PrintWriter(sock.getOutputStream(), true);</PRE></BLOCKQUOTE><H1>Related Guideline</H1><UL><LI><A href="ruledisplay:5E283FD0-1A55-4DC3-971D-BF7C3318E7CB">Guideline: Encrypt Communication Links (Java Web Application)</A> </LI></UL>
]]></content></guidanceItem>