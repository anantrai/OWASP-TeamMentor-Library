<?xml version="1.0" encoding="utf-8"?><guidanceItem id="275e5831-738a-44de-997b-f79d97039027" type="checklist" title="All Output Data is Encoded" cssFile="guidance.css" Date="2010-12-29T22:48:44.953125Z" Author="" Category="Input and Data Validation" filePath="..\Libraries\OWASP\Checklist Item\275e5831-738a-44de-997b-f79d97039027.xml" Priority="1" Rule_Type="Implementation" Source="SI" Status="" Technology="Java" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Ensure that all echoed input is first encoded.</P><H1>Why</H1><P>Encoding echoed input prevents injection attacks such as cross-site scripting.</P><H1>How to Check</H1><P>An application can take input via various&nbsp;sources, such as a web interface, database, file system or other software running on the server, and then use that same input in various outputs. Use the following steps to establish a validation strategy:</P><OL><LI><P><STRONG>Identify all sources of input. </STRONG>At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:</P><UL><LI>URL based parameters <LI>Form based parameters <LI>Hidden fields <LI>Cookies <LI>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) <LI>Local filesystem <LI>Database <LI>Other services running on the system <LI>Javascript variables <LI>File upload and attributes (filename, size, data, etc) <LI>DNS results or host names <LI>External component call return values (COM, AJAX, ActiveX) </LI></UL><P>Once you&nbsp;have listed the sources of input your application&nbsp;can use, look for all entry points. Good starting points are method parameters and assignment statements. For example: </P><P>This method uses the <STRONG>searchTerm</STRONG> variable.</P><BLOCKQUOTE><PRE>void aggregateData(PrintWriter out, String searchTerm)<BR> ...<BR><BR>double&#91;&#93; rData = common.queryDBForIndex(searchTerm);</PRE></BLOCKQUOTE><P>This assignment stores data from a <STRONG>GET</STRONG> request parameter named <STRONG>index</STRONG> and stores it in the <STRONG>String searchTerm</STRONG>. Ensure that this input is validated.</P><BLOCKQUOTE><PRE>String searchTerm = request.getParameter("index");</PRE></BLOCKQUOTE><P>This assignment uses the input that was gathered above to store more input from a database. Verify that <STRONG>searchTerm</STRONG> is validated before this use, and also ensure that <STRONG>rData</STRONG> is validated as another source of input.</P><BLOCKQUOTE><PRE>double&#91;&#93; rData = common.queryDBForIndex(searchTerm);</PRE></BLOCKQUOTE><LI><P><STRONG>Trace data from source to sink. </STRONG>Trace each source of input from the immediate source, through your application, to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database. Create a list of the input sources that are echoed back to the user through output - whether directly, through a file, in a URL or through a database or other intermediary source.</P><P>Input used as output may be identified by the following:</P><UL><LI>out.println() <LI>append() <LI>insert() <LI>write() <LI>Assignment operator (=) <LI>Increment and assignment operator (&#43;=) <LI>Database write operations</LI></UL><LI><P><STRONG>Ensure input is properly encoded before being used as output. </STRONG>Each of the input sources identified above should have the input encoded properly before it is used as output. Encoding must be selected appropriately based upon how the output is returned to the client - either as HTML content or in a URL. Verify the context in which the output is used and ensure it is properly encoded:</P><UL><LI>URLs - <STRONG>URLEncoder.encode(output)</STRONG> <LI>HTML - JSP HTML encoding: <STRONG>&lt;&#37;= &#123;output&#125; &#37;&gt;</LI></UL>Note: </STRONG>A custom HTML encoder can be developed as shown below but using built-in functionality whenever possible is recommended. <UL></UL><P>Be aware that data taken from the URL and used within the HTML must be HTML encoded, not URL encoded. Consider a dynamically created form, which builds the <STRONG>ACTION</STRONG> tag from the current URL used to access the form. The user-supplied URL is used as input in this case, and the output is directly to the HTML page created. The URL must be HTML encoded prior to being used to avoid script injection issues. See the example below:</P><P>User URL provided: <BLOCKQUOTE><PRE>http://server/form?x=<STRONG>"&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;</STRONG></PRE></BLOCKQUOTE><P>No encoding:</P><BLOCKQUOTE><PRE>&lt;form action="http://server/form?x=<STRONG>"&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;</STRONG>"&gt;</PRE></BLOCKQUOTE><P>URL Encoding:</P><BLOCKQUOTE><PRE>&lt;form action="http://server/form&#37;3Fx&#37;3D<STRONG>&#37;22&#37;3E&#37;3CSCRIPT&#37;3Ealert&#37;28&#37;27XSS&#37;27&#37;29&#37;3B&#37;3C/SCRIPT&#37;3E</STRONG>"&gt;</PRE></BLOCKQUOTE><P>HTML Encoding:</P><BLOCKQUOTE><PRE> &lt;form action="http://server/form?x=<STRONG>&amp;quot;&lt;&lt;SCRIPT&lt;alert('XSS');&lt;/SCRIPT&lt;</STRONG>"&gt;</PRE></BLOCKQUOTE></LI></OL><H1>Problem Example</H1><P>The following code produces a data analysis based on a financial index. Because it does not HTML encode the echoed input, the application is vulnerable to reflective cross-site scripting.</P><P><BLOCKQUOTE><PRE>import java.io.&#42;;<BR>import java.util.&#42;;<BR>import java.lang.&#42;;<BR>import javax.servlet.&#42;;<BR>import javax.servlet.http.&#42;;<BR>import java.util.regex.&#42;;<BR> public final class DataAggregator extends HttpServlet<BR>&#123;<BR>      public void doGet(HttpServletRequest request, HttpServletResponse response)<BR>            throws ServletException, IOException<BR>      &#123;<BR>            PrintWriter out = response.getWriter();<BR>            String searchTerm = request.getParameter("index");<BR>             try<BR>            &#123;<BR>                  if (validateSearchTerm(searchTerm))<BR>                  &#123;<BR>                        String retString;<BR>                        retString = "The queried index \"";<BR>                        // The application does not HTML encode the returned input<BR>                        retString &#43;= searchTerm;<BR>                        retString &#43;= "\" produced the following results:&lt;br&gt; ";<BR>                        out.println(retString);<BR>                        common.aggregateData(out, searchTerm);<BR>                  &#125;<BR>                  else<BR>                  &#123;<BR>                        // Add the appropriate logging and exception handling<BR>                        // mechanisms. Consult the Exception Handling and<BR>                        // Logging sections<BR>                        out.println("We cannot handle your request at the moment."<BR>                                 &#43;  "Please try again later.");<BR>                  &#125;<BR>            &#125;<BR>             catch (Exception e)<BR>            &#123;<BR>                  // Add the appropriate logging and exception handling<BR>                  // mechanisms. Consult the Exception Handling<BR>                  // and Logging sections<BR>                  out.println("We cannot handle your request at the moment."<BR>                           &#43;  "Please try again later.");<BR>            &#125;<BR>             out.flush();<BR><BR>             out.close();<BR>      &#125;<BR>&#125;</PRE></BLOCKQUOTE><H1>Additional Resources</H1><UL><LI>To learn more about cross-site scripting, including a library to help defend against cross-site scripting attacks, see: <A href="http://www-128.ibm.com/developerworks/tivoli/library/s-csscript/">Cross-site scripting</A>. <LI>To learn more about cross-site scripting, see: <A href="http://today.java.net/pub/a/today/2005/09/20/handling-web-app-input.html">Handling Java Web Application Input, Part 2</A>. </LI></UL><H1>Related Guideline</H1><UL><LI><A href="ruledisplay:2D8158D1-E2D1-459F-9BD7-56D4B979EFE3">Guideline: Encode All Output Data (Java Web Application)</A> </LI></UL>
]]></content></guidanceItem>