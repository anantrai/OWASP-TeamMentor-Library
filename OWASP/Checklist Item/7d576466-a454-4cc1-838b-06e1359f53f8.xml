<?xml version="1.0" encoding="utf-8"?><guidanceItem id="7d576466-a454-4cc1-838b-06e1359f53f8" type="checklist" title="Session Cookies are Protected" cssFile="guidance.css" Date="2010-12-30T00:11:20.96875Z" Author="" Category="Session Management" filePath="..\Libraries\OWASP\Checklist Item\7d576466-a454-4cc1-838b-06e1359f53f8.xml" Priority="2" Rule_Type="Implementation" Source="SI" Status="" Technology="Java" Topic="Security" Type="Checklist Item" xmlns="urn:microsoft:guidanceexplorer:guidanceItem"><content><![CDATA[<H1>What to Check For</H1><P>Ensure that the confidentiality of session cookies is protected.</P><H1>Why</H1><P>Session cookies are used by an application to identify the session associated with a particular user. Protecting session cookies can help prevent an attacker from hijacking the session and using the application posing as a legitimate user.</P><H1>How to Check</H1><P>Use the following steps to verify that your application's session cookies are handled securely:</P><OL><LI><P><STRONG>Verify that session identifiers cannot be guessed. </STRONG>Ensure that your application's session identifiers cannot be guessed by an attacker. Verify that your application's session IDs meet the following requirements:</P><UL><LI><STRONG>Length</STRONG>: Your application uses long session identifiers (e.g. string of length 32). <LI><STRONG>Triviality</STRONG>: Your application uses randomly generated session identifiers. <LI><STRONG>Lifetime</STRONG>: Your application uses <STRONG>HttpSession.setMaxInactiveInterval</STRONG> to expire inactive sessions. <LI><STRONG>Recycling</STRONG>: Your application does not reuse previously used sessions.</LI></UL><LI><P><STRONG>Verify that users can invalidate their own sessions. </STRONG>Ensure that your application uses <STRONG>HttpSession.invalidate</STRONG> to allow its users to invalidate their own sessions.</P><LI><P><STRONG>Verify that session cookies are sent over encrypted channels. </STRONG>Ensure your application transmits session cookies over encrypted channels. Although this is not required for non-sensitive transactions, it is mandatory for any transactions are sensitive in nature.</P></LI></OL><H1>Problem Example</H1><P>The following code shows the logout function of the <STRONG>LoginModule</STRONG> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session but fails to invalidate the session. </P><P><BLOCKQUOTE><PRE>public boolean logout() throws LoginException<BR>&#123;<BR>      subject.getPrincipals().remove(userToken);<BR>      succeeded = false;<BR>      commitSucceeded = false;<BR>      clearCredentials();<BR>      userToken = null;<BR>       // The application should have invalidated the session here.<BR>       // Log the logout event. Consult the Logging section for more details<BR>      return true;<BR>&#125;</PRE></BLOCKQUOTE><H1>Additional Resources</H1><UL><LI>To learn more about session prediction attacks, see: <A href="http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml">Credential and Session Prediction</A>.</LI></UL><H1>Related Guideline</H1><UL><LI><A href="ruledisplay:F0E2BFFC-E6D1-4DC6-A6C2-D078F54AE10E">Guideline: Protect Session Cookies (Java Web Application)</A> </LI></UL>
]]></content></guidanceItem>